/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present.
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bdaya.MailInABox.Model;
using Bdaya.MailInABox.Client;
using System.Reflection;
using System.Text.Json;
using Microsoft.Extensions.DependencyInjection;

namespace Bdaya.MailInABox.Test.Model
{
    /// <summary>
    ///  Class for testing MailAliasByDomain
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public sealed class MailAliasByDomainTests : ModelTestBase
    {
        [Fact]
        public void JsonTest()
        {
            const string json =
                @"[
  {
    ""aliases"": [
      {
        ""address"": ""administrator@box.example.com"",
        ""address_display"": ""administrator@box.example.com"",
        ""auto"": false,
        ""forwards_to"": [
          ""a1@example.com"",
          ""a2@example.com""
        ],
        ""permitted_senders"": null
      },
      {
        ""address"": ""postmaster@box.example.com"",
        ""address_display"": ""postmaster@box.example.com"",
        ""auto"": true,
        ""forwards_to"": [
          ""administrator@box.example.com""
        ],
        ""permitted_senders"": null
      }
    ],
    ""domain"": ""box.example.com""
  },
  {
    ""aliases"": [
      {
        ""address"": ""postmaster@example2.com"",
        ""address_display"": ""postmaster@example2.com"",
        ""auto"": true,
        ""forwards_to"": [
          ""administrator@box.example.com""
        ],
        ""permitted_senders"": null
      }
    ],
    ""domain"": ""example2.com""
  }
]";

            var instance = JsonSerializer.Deserialize<List<MailAliasByDomain>>(
                json,
                JsonSerializerOptions
            );
            Assert.NotNull(instance);
            Assert.NotEmpty(instance);
            Assert.Equal("box.example.com", instance.First().Domain);
            Assert.NotEmpty(instance.First().Aliases);
            Assert.False(instance.First().Aliases.First().Auto);
            Assert.NotEmpty(instance.First().Aliases.First().ForwardsTo);
        }
    }
}