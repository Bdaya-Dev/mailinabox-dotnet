/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Bdaya.MailInABox.Client;
using Bdaya.MailInABox.Api;
using Bdaya.MailInABox.Extensions;
using Xunit;

namespace Bdaya.MailInABox.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient = 
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureApi((context, services, options) =>
            {
                
                BasicToken basicToken = new BasicToken("<username>", "<password>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(basicToken);
                
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureApi((context, services, options) =>
            {
                
                BasicToken basicToken = new BasicToken("<username>", "<password>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(basicToken);
                
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    
                    BasicToken basicToken = new BasicToken("<username>", "<password>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(basicToken);
                    
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    
                    BasicToken basicToken = new BasicToken("<username>", "<password>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(basicToken);
                    
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var dNSApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDNSApi>();
            Assert.True(dNSApi.HttpClient.BaseAddress != null);
            
            var mFAApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMFAApi>();
            Assert.True(mFAApi.HttpClient.BaseAddress != null);
            
            var mailApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMailApi>();
            Assert.True(mailApi.HttpClient.BaseAddress != null);
            
            var sSLApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISSLApi>();
            Assert.True(sSLApi.HttpClient.BaseAddress != null);
            
            var systemApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISystemApi>();
            Assert.True(systemApi.HttpClient.BaseAddress != null);
            
            var userApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);
            
            var webApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWebApi>();
            Assert.True(webApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var dNSApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDNSApi>();
            Assert.True(dNSApi.HttpClient.BaseAddress != null);
            
            var mFAApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMFAApi>();
            Assert.True(mFAApi.HttpClient.BaseAddress != null);
            
            var mailApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMailApi>();
            Assert.True(mailApi.HttpClient.BaseAddress != null);
            
            var sSLApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISSLApi>();
            Assert.True(sSLApi.HttpClient.BaseAddress != null);
            
            var systemApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISystemApi>();
            Assert.True(systemApi.HttpClient.BaseAddress != null);
            
            var userApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);
            
            var webApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWebApi>();
            Assert.True(webApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var dNSApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDNSApi>();
            Assert.True(dNSApi.HttpClient.BaseAddress != null);
            
            var mFAApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMFAApi>();
            Assert.True(mFAApi.HttpClient.BaseAddress != null);
            
            var mailApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMailApi>();
            Assert.True(mailApi.HttpClient.BaseAddress != null);
            
            var sSLApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISSLApi>();
            Assert.True(sSLApi.HttpClient.BaseAddress != null);
            
            var systemApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISystemApi>();
            Assert.True(systemApi.HttpClient.BaseAddress != null);
            
            var userApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);
            
            var webApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWebApi>();
            Assert.True(webApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var dNSApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDNSApi>();
            Assert.True(dNSApi.HttpClient.BaseAddress != null);
            
            var mFAApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMFAApi>();
            Assert.True(mFAApi.HttpClient.BaseAddress != null);
            
            var mailApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMailApi>();
            Assert.True(mailApi.HttpClient.BaseAddress != null);
            
            var sSLApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISSLApi>();
            Assert.True(sSLApi.HttpClient.BaseAddress != null);
            
            var systemApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISystemApi>();
            Assert.True(systemApi.HttpClient.BaseAddress != null);
            
            var userApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);
            
            var webApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWebApi>();
            Assert.True(webApi.HttpClient.BaseAddress != null);
        }
    }
}
