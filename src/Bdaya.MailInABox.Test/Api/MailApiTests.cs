/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present.
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Bdaya.MailInABox.Api;
using Bdaya.MailInABox.Client;
using Bdaya.MailInABox.Model;

/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Bdaya.MailInABox.Test.Api
{
    /// <summary>
    ///  Class for testing MailApi
    /// </summary>
    public sealed class MailApiTests : ApiTestsBase
    {
        private readonly IMailApi _instance;
        private readonly JsonSerializerOptions _jsonSerializerOptions;

        public MailApiTests()
            : base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IMailApi>();
            _jsonSerializerOptions = _host.Services.GetRequiredService<JsonSerializerOptionsProvider>().Options;
        }

        /// <summary>
        /// Test AddMailUser
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task AddMailUserAsyncTest()
        {
            MailUserPrivilege privileges = default!;
            string email = default!;
            string password = default!;
            var response = await _instance.AddMailUserAsync(privileges, email, password);
            var model = response.AsModel();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test AddMailUserPrivilege
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task AddMailUserPrivilegeAsyncTest()
        {
            MailUserPrivilege privilege = default!;
            string email = default!;
            var response = await _instance.AddMailUserPrivilegeAsync(privilege, email);
            var model = response.AsModel();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetMailAliases
        /// </summary>
        [Fact]
        public async Task GetMailAliasesAsyncTest()
        {
            Client.Option<MailAliasesResponseFormat> format = new(MailAliasesResponseFormat.Json);
            var response = await _instance.GetMailAliasesAsync(format);
            Assert.NotNull(_jsonSerializerOptions);
            var model = response.AsModel();
            Assert.NotNull(model);
        }

        /// <summary>
        /// Test GetMailDomains
        /// </summary>
        [Fact]
        public async Task GetMailDomainsAsyncTest()
        {
            var response = await _instance.GetMailDomainsAsync();
            var model = response.AsModel();
            Assert.NotNull(model);
            var modelSplit = model.Split(
                '\n',
                StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries
            );
            Assert.NotEmpty(modelSplit);
        }

        /// <summary>
        /// Test GetMailUserPrivileges
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task GetMailUserPrivilegesAsyncTest()
        {
            Client.Option<string> email = default!;
            var response = await _instance.GetMailUserPrivilegesAsync(email);
            var model = response.AsModel();
            Assert.IsType<MailUserPrivilege>(model);
        }

        /// <summary>
        /// Test GetMailUsers
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task GetMailUsersAsyncTest()
        {
            Client.Option<MailUsersResponseFormat> format = default!;
            var response = await _instance.GetMailUsersAsync(format);
            var model = response.AsModel();
            Assert.IsType<List<MailUserByDomain>>(model);
        }

        /// <summary>
        /// Test RemoveMailAlias
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task RemoveMailAliasAsyncTest()
        {
            string address = default!;
            var response = await _instance.RemoveMailAliasAsync(address);
            var model = response.AsModel();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test RemoveMailUser
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task RemoveMailUserAsyncTest()
        {
            string email = default!;
            var response = await _instance.RemoveMailUserAsync(email);
            var model = response.AsModel();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test RemoveMailUserPrivilege
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task RemoveMailUserPrivilegeAsyncTest()
        {
            MailUserPrivilege privilege = default!;
            string email = default!;
            var response = await _instance.RemoveMailUserPrivilegeAsync(privilege, email);
            var model = response.AsModel();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test SetMailUserPassword
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task SetMailUserPasswordAsyncTest()
        {
            string email = default!;
            string password = default!;
            var response = await _instance.SetMailUserPasswordAsync(email, password);
            var model = response.AsModel();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test UpsertMailAlias
        /// </summary>
        [Fact(Skip = "not implemented")]
        public async Task UpsertMailAliasAsyncTest()
        {
            int updateIfExists = default!;
            string address = default!;
            string forwardsTo = default!;
            string? permittedSenders = default!;
            var response = await _instance.UpsertMailAliasAsync(
                updateIfExists,
                address,
                forwardsTo,
                permittedSenders
            );
            var model = response.AsModel();
            Assert.IsType<string>(model);
        }
    }
}