/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Bdaya.MailInABox.Api;
using Bdaya.MailInABox.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Bdaya.MailInABox.Test.Api
{
    /// <summary>
    ///  Class for testing MFAApi
    /// </summary>
    public sealed class MFAApiTests : ApiTestsBase
    {
        private readonly IMFAApi _instance;

        public MFAApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IMFAApi>();
        }

        /// <summary>
        /// Test MfaStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MfaStatusAsyncTest()
        {
            var response = await _instance.MfaStatusAsync();
            var model = response.AsModel();
            Assert.IsType<MfaStatusResponse>(model);
        }

        /// <summary>
        /// Test MfaTotpDisable
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MfaTotpDisableAsyncTest()
        {
            Client.Option<string?> mfaId = default!;
            var response = await _instance.MfaTotpDisableAsync(mfaId);
            var model = response.AsModel();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test MfaTotpEnable
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MfaTotpEnableAsyncTest()
        {
            string secret = default!;
            string code = default!;
            Client.Option<string> label = default!;
            var response = await _instance.MfaTotpEnableAsync(secret, code, label);
            var model = response.AsModel();
            Assert.IsType<string>(model);
        }
    }
}
