// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Bdaya.MailInABox.Client.ClientUtils;

namespace Bdaya.MailInABox.Model
{
    /// <summary>
    /// SSL status type.
    /// </summary>
    /// <value>SSL status type.</value>
    public enum SSLStatusType
    {
        /// <summary>
        /// Enum Success for value: success
        /// </summary>
        Success = 1,

        /// <summary>
        /// Enum Danger for value: danger
        /// </summary>
        Danger = 2,

        /// <summary>
        /// Enum NotApplicable for value: not-applicable
        /// </summary>
        NotApplicable = 3
    }

    /// <summary>
    /// Converts <see cref="SSLStatusType"/> to and from the JSON value
    /// </summary>
    public static class SSLStatusTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SSLStatusType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SSLStatusType FromString(string value)
        {
            if (value.Equals("success"))
                return SSLStatusType.Success;

            if (value.Equals("danger"))
                return SSLStatusType.Danger;

            if (value.Equals("not-applicable"))
                return SSLStatusType.NotApplicable;

            throw new NotImplementedException($"Could not convert value to type SSLStatusType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="SSLStatusType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SSLStatusType? FromStringOrDefault(string value)
        {
            if (value.Equals("success"))
                return SSLStatusType.Success;

            if (value.Equals("danger"))
                return SSLStatusType.Danger;

            if (value.Equals("not-applicable"))
                return SSLStatusType.NotApplicable;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SSLStatusType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(SSLStatusType value)
        {
            if (value == SSLStatusType.Success)
                return "success";

            if (value == SSLStatusType.Danger)
                return "danger";

            if (value == SSLStatusType.NotApplicable)
                return "not-applicable";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SSLStatusType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SSLStatusTypeJsonConverter : JsonConverter<SSLStatusType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SSLStatusType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SSLStatusType? result = rawValue == null
                ? null
                : SSLStatusTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SSLStatusType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sSLStatusType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SSLStatusType sSLStatusType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(sSLStatusType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SSLStatusType"/>
    /// </summary>
    public class SSLStatusTypeNullableJsonConverter : JsonConverter<SSLStatusType?>
    {
        /// <summary>
        /// Returns a SSLStatusType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SSLStatusType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SSLStatusType? result = rawValue == null
                ? null
                : SSLStatusTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sSLStatusType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SSLStatusType? sSLStatusType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(sSLStatusType?.ToString() ?? "null");
        }
    }
}
