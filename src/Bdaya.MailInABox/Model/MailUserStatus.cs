// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Bdaya.MailInABox.Client.ClientUtils;

namespace Bdaya.MailInABox.Model
{
    /// <summary>
    /// Mail user status.
    /// </summary>
    /// <value>Mail user status.</value>
    public enum MailUserStatus
    {
        /// <summary>
        /// Enum Active for value: active
        /// </summary>
        Active = 1,

        /// <summary>
        /// Enum Inactive for value: inactive
        /// </summary>
        Inactive = 2
    }

    /// <summary>
    /// Converts <see cref="MailUserStatus"/> to and from the JSON value
    /// </summary>
    public static class MailUserStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="MailUserStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MailUserStatus FromString(string value)
        {
            if (value.Equals("active"))
                return MailUserStatus.Active;

            if (value.Equals("inactive"))
                return MailUserStatus.Inactive;

            throw new NotImplementedException($"Could not convert value to type MailUserStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="MailUserStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MailUserStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("active"))
                return MailUserStatus.Active;

            if (value.Equals("inactive"))
                return MailUserStatus.Inactive;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MailUserStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(MailUserStatus value)
        {
            if (value == MailUserStatus.Active)
                return "active";

            if (value == MailUserStatus.Inactive)
                return "inactive";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MailUserStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class MailUserStatusJsonConverter : JsonConverter<MailUserStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MailUserStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MailUserStatus? result = rawValue == null
                ? null
                : MailUserStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the MailUserStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mailUserStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MailUserStatus mailUserStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mailUserStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MailUserStatus"/>
    /// </summary>
    public class MailUserStatusNullableJsonConverter : JsonConverter<MailUserStatus?>
    {
        /// <summary>
        /// Returns a MailUserStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MailUserStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MailUserStatus? result = rawValue == null
                ? null
                : MailUserStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mailUserStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MailUserStatus? mailUserStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mailUserStatus?.ToString() ?? "null");
        }
    }
}
