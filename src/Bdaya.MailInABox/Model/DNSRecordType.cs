// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Bdaya.MailInABox.Client.ClientUtils;

namespace Bdaya.MailInABox.Model
{
    /// <summary>
    /// DNS record type.
    /// </summary>
    /// <value>DNS record type.</value>
    public enum DNSRecordType
    {
        /// <summary>
        /// Enum A for value: A
        /// </summary>
        A = 1,

        /// <summary>
        /// Enum AAAA for value: AAAA
        /// </summary>
        AAAA = 2,

        /// <summary>
        /// Enum CAA for value: CAA
        /// </summary>
        CAA = 3,

        /// <summary>
        /// Enum CNAME for value: CNAME
        /// </summary>
        CNAME = 4,

        /// <summary>
        /// Enum TXT for value: TXT
        /// </summary>
        TXT = 5,

        /// <summary>
        /// Enum MX for value: MX
        /// </summary>
        MX = 6,

        /// <summary>
        /// Enum SRV for value: SRV
        /// </summary>
        SRV = 7,

        /// <summary>
        /// Enum SSHFP for value: SSHFP
        /// </summary>
        SSHFP = 8,

        /// <summary>
        /// Enum NS for value: NS
        /// </summary>
        NS = 9
    }

    /// <summary>
    /// Converts <see cref="DNSRecordType"/> to and from the JSON value
    /// </summary>
    public static class DNSRecordTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DNSRecordType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DNSRecordType FromString(string value)
        {
            if (value.Equals("A"))
                return DNSRecordType.A;

            if (value.Equals("AAAA"))
                return DNSRecordType.AAAA;

            if (value.Equals("CAA"))
                return DNSRecordType.CAA;

            if (value.Equals("CNAME"))
                return DNSRecordType.CNAME;

            if (value.Equals("TXT"))
                return DNSRecordType.TXT;

            if (value.Equals("MX"))
                return DNSRecordType.MX;

            if (value.Equals("SRV"))
                return DNSRecordType.SRV;

            if (value.Equals("SSHFP"))
                return DNSRecordType.SSHFP;

            if (value.Equals("NS"))
                return DNSRecordType.NS;

            throw new NotImplementedException($"Could not convert value to type DNSRecordType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DNSRecordType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DNSRecordType? FromStringOrDefault(string value)
        {
            if (value.Equals("A"))
                return DNSRecordType.A;

            if (value.Equals("AAAA"))
                return DNSRecordType.AAAA;

            if (value.Equals("CAA"))
                return DNSRecordType.CAA;

            if (value.Equals("CNAME"))
                return DNSRecordType.CNAME;

            if (value.Equals("TXT"))
                return DNSRecordType.TXT;

            if (value.Equals("MX"))
                return DNSRecordType.MX;

            if (value.Equals("SRV"))
                return DNSRecordType.SRV;

            if (value.Equals("SSHFP"))
                return DNSRecordType.SSHFP;

            if (value.Equals("NS"))
                return DNSRecordType.NS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DNSRecordType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DNSRecordType value)
        {
            if (value == DNSRecordType.A)
                return "A";

            if (value == DNSRecordType.AAAA)
                return "AAAA";

            if (value == DNSRecordType.CAA)
                return "CAA";

            if (value == DNSRecordType.CNAME)
                return "CNAME";

            if (value == DNSRecordType.TXT)
                return "TXT";

            if (value == DNSRecordType.MX)
                return "MX";

            if (value == DNSRecordType.SRV)
                return "SRV";

            if (value == DNSRecordType.SSHFP)
                return "SSHFP";

            if (value == DNSRecordType.NS)
                return "NS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DNSRecordType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DNSRecordTypeJsonConverter : JsonConverter<DNSRecordType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DNSRecordType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DNSRecordType? result = rawValue == null
                ? null
                : DNSRecordTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DNSRecordType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dNSRecordType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DNSRecordType dNSRecordType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dNSRecordType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DNSRecordType"/>
    /// </summary>
    public class DNSRecordTypeNullableJsonConverter : JsonConverter<DNSRecordType?>
    {
        /// <summary>
        /// Returns a DNSRecordType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DNSRecordType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DNSRecordType? result = rawValue == null
                ? null
                : DNSRecordTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dNSRecordType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DNSRecordType? dNSRecordType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dNSRecordType?.ToString() ?? "null");
        }
    }
}
