// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Bdaya.MailInABox.Client.ClientUtils;

namespace Bdaya.MailInABox.Model
{
    /// <summary>
    /// Backup status details.
    /// </summary>
    public partial class SystemBackupStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemBackupStatus" /> class.
        /// </summary>
        /// <param name="date">date</param>
        /// <param name="dateDelta">dateDelta</param>
        /// <param name="dateStr">dateStr</param>
        /// <param name="deletedIn">deletedIn</param>
        /// <param name="full">full</param>
        /// <param name="size">size</param>
        /// <param name="volumes">volumes</param>
        [JsonConstructor]
        public SystemBackupStatus(DateTime date, string dateDelta, string dateStr, string deletedIn, bool full, int size, int volumes)
        {
            Date = date;
            DateDelta = dateDelta;
            DateStr = dateStr;
            DeletedIn = deletedIn;
            Full = full;
            Size = size;
            Volumes = volumes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets DateDelta
        /// </summary>
        /// <example>15 hours, 40 minutes</example>
        [JsonPropertyName("date_delta")]
        public string DateDelta { get; set; }

        /// <summary>
        /// Gets or Sets DateStr
        /// </summary>
        /// <example>2020-08-01 03:37:06 BST</example>
        [JsonPropertyName("date_str")]
        public string DateStr { get; set; }

        /// <summary>
        /// Gets or Sets DeletedIn
        /// </summary>
        /// <example>approx. 6 days</example>
        [JsonPropertyName("deleted_in")]
        public string DeletedIn { get; set; }

        /// <summary>
        /// Gets or Sets Full
        /// </summary>
        /// <example>false</example>
        [JsonPropertyName("full")]
        public bool Full { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        /// <example>125332</example>
        [JsonPropertyName("size")]
        public int Size { get; set; }

        /// <summary>
        /// Gets or Sets Volumes
        /// </summary>
        /// <example>1</example>
        [JsonPropertyName("volumes")]
        public int Volumes { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemBackupStatus {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DateDelta: ").Append(DateDelta).Append("\n");
            sb.Append("  DateStr: ").Append(DateStr).Append("\n");
            sb.Append("  DeletedIn: ").Append(DeletedIn).Append("\n");
            sb.Append("  Full: ").Append(Full).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemBackupStatus" />
    /// </summary>
    public class SystemBackupStatusJsonConverter : JsonConverter<SystemBackupStatus>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SystemBackupStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemBackupStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            DateTime? date = default;
            string? dateDelta = default;
            string? dateStr = default;
            string? deletedIn = default;
            bool? full = default;
            int? size = default;
            int? volumes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "date":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                date = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "date_delta":
                            dateDelta = utf8JsonReader.GetString();
                            break;
                        case "date_str":
                            dateStr = utf8JsonReader.GetString();
                            break;
                        case "deleted_in":
                            deletedIn = utf8JsonReader.GetString();
                            break;
                        case "full":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                full = utf8JsonReader.GetBoolean();
                            break;
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = utf8JsonReader.GetInt32();
                            break;
                        case "volumes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                volumes = utf8JsonReader.GetInt32();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (date == null)
                throw new ArgumentNullException(nameof(date), "Property is required for class SystemBackupStatus.");

            if (dateDelta == null)
                throw new ArgumentNullException(nameof(dateDelta), "Property is required for class SystemBackupStatus.");

            if (dateStr == null)
                throw new ArgumentNullException(nameof(dateStr), "Property is required for class SystemBackupStatus.");

            if (deletedIn == null)
                throw new ArgumentNullException(nameof(deletedIn), "Property is required for class SystemBackupStatus.");

            if (full == null)
                throw new ArgumentNullException(nameof(full), "Property is required for class SystemBackupStatus.");

            if (size == null)
                throw new ArgumentNullException(nameof(size), "Property is required for class SystemBackupStatus.");

            if (volumes == null)
                throw new ArgumentNullException(nameof(volumes), "Property is required for class SystemBackupStatus.");

            return new SystemBackupStatus(date.Value, dateDelta, dateStr, deletedIn, full.Value, size.Value, volumes.Value);
        }

        /// <summary>
        /// Serializes a <see cref="SystemBackupStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemBackupStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemBackupStatus systemBackupStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, systemBackupStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemBackupStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemBackupStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, SystemBackupStatus systemBackupStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("date", systemBackupStatus.Date.ToString(DateFormat));
            writer.WriteString("date_delta", systemBackupStatus.DateDelta);
            writer.WriteString("date_str", systemBackupStatus.DateStr);
            writer.WriteString("deleted_in", systemBackupStatus.DeletedIn);
            writer.WriteBoolean("full", systemBackupStatus.Full);
            writer.WriteNumber("size", systemBackupStatus.Size);
            writer.WriteNumber("volumes", systemBackupStatus.Volumes);
        }
    }
}
