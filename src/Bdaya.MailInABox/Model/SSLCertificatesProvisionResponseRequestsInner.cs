// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Bdaya.MailInABox.Client.ClientUtils;

namespace Bdaya.MailInABox.Model
{
    /// <summary>
    /// SSLCertificatesProvisionResponseRequestsInner
    /// </summary>
    public partial class SSLCertificatesProvisionResponseRequestsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SSLCertificatesProvisionResponseRequestsInner" /> class.
        /// </summary>
        /// <param name="domains">domains</param>
        /// <param name="log">log</param>
        /// <param name="result">result</param>
        [JsonConstructor]
        public SSLCertificatesProvisionResponseRequestsInner(List<string> domains, List<string> log, ResultEnum result)
        {
            Domains = domains;
            Log = log;
            Result = result;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Result
        /// </summary>
        public enum ResultEnum
        {
            /// <summary>
            /// Enum Installed for value: installed
            /// </summary>
            Installed = 1,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            Error = 2,

            /// <summary>
            /// Enum Skipped for value: skipped
            /// </summary>
            Skipped = 3
        }

        /// <summary>
        /// Returns a <see cref="ResultEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ResultEnum ResultEnumFromString(string value)
        {
            if (value.Equals("installed"))
                return ResultEnum.Installed;

            if (value.Equals("error"))
                return ResultEnum.Error;

            if (value.Equals("skipped"))
                return ResultEnum.Skipped;

            throw new NotImplementedException($"Could not convert value to type ResultEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ResultEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResultEnum? ResultEnumFromStringOrDefault(string value)
        {
            if (value.Equals("installed"))
                return ResultEnum.Installed;

            if (value.Equals("error"))
                return ResultEnum.Error;

            if (value.Equals("skipped"))
                return ResultEnum.Skipped;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ResultEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ResultEnumToJsonValue(ResultEnum value)
        {
            if (value == ResultEnum.Installed)
                return "installed";

            if (value == ResultEnum.Error)
                return "error";

            if (value == ResultEnum.Skipped)
                return "skipped";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        /// <example>installed</example>
        [JsonPropertyName("result")]
        public ResultEnum Result { get; set; }

        /// <summary>
        /// Gets or Sets Domains
        /// </summary>
        [JsonPropertyName("domains")]
        public List<string> Domains { get; set; }

        /// <summary>
        /// Gets or Sets Log
        /// </summary>
        /// <example>[&quot;The domain name does not resolve to this machine: [Not Set] (A), [Not Set] (AAAA).&quot;]</example>
        [JsonPropertyName("log")]
        public List<string> Log { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SSLCertificatesProvisionResponseRequestsInner {\n");
            sb.Append("  Domains: ").Append(Domains).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SSLCertificatesProvisionResponseRequestsInner" />
    /// </summary>
    public class SSLCertificatesProvisionResponseRequestsInnerJsonConverter : JsonConverter<SSLCertificatesProvisionResponseRequestsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="SSLCertificatesProvisionResponseRequestsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SSLCertificatesProvisionResponseRequestsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            List<string>? domains = default;
            List<string>? log = default;
            SSLCertificatesProvisionResponseRequestsInner.ResultEnum? result = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domains":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                domains = JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "log":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                log = JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "result":
                            string? resultRawValue = utf8JsonReader.GetString();
                            result = resultRawValue == null
                                ? null
                                : SSLCertificatesProvisionResponseRequestsInner.ResultEnumFromStringOrDefault(resultRawValue);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (domains == null)
                throw new ArgumentNullException(nameof(domains), "Property is required for class SSLCertificatesProvisionResponseRequestsInner.");

            if (log == null)
                throw new ArgumentNullException(nameof(log), "Property is required for class SSLCertificatesProvisionResponseRequestsInner.");

            if (result == null)
                throw new ArgumentNullException(nameof(result), "Property is required for class SSLCertificatesProvisionResponseRequestsInner.");

            return new SSLCertificatesProvisionResponseRequestsInner(domains, log, result.Value);
        }

        /// <summary>
        /// Serializes a <see cref="SSLCertificatesProvisionResponseRequestsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sSLCertificatesProvisionResponseRequestsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SSLCertificatesProvisionResponseRequestsInner sSLCertificatesProvisionResponseRequestsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, sSLCertificatesProvisionResponseRequestsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SSLCertificatesProvisionResponseRequestsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sSLCertificatesProvisionResponseRequestsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, SSLCertificatesProvisionResponseRequestsInner sSLCertificatesProvisionResponseRequestsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WritePropertyName("domains");
            JsonSerializer.Serialize(writer, sSLCertificatesProvisionResponseRequestsInner.Domains, jsonSerializerOptions);
            writer.WritePropertyName("log");
            JsonSerializer.Serialize(writer, sSLCertificatesProvisionResponseRequestsInner.Log, jsonSerializerOptions);

            var resultRawValue = SSLCertificatesProvisionResponseRequestsInner.ResultEnumToJsonValue(sSLCertificatesProvisionResponseRequestsInner.Result);
            if (resultRawValue != null)
                writer.WriteString("result", resultRawValue);
            else
                writer.WriteNull("result");
        }
    }
}
