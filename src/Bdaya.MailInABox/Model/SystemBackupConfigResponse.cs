// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Bdaya.MailInABox.Client.ClientUtils;

namespace Bdaya.MailInABox.Model
{
    /// <summary>
    /// Backup config response.
    /// </summary>
    public partial class SystemBackupConfigResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemBackupConfigResponse" /> class.
        /// </summary>
        /// <param name="encPwFile">encPwFile</param>
        /// <param name="fileTargetDirectory">fileTargetDirectory</param>
        /// <param name="minAgeInDays">minAgeInDays</param>
        /// <param name="sshPubKey">sshPubKey</param>
        /// <param name="target">target</param>
        /// <param name="targetPass">targetPass</param>
        /// <param name="targetUser">targetUser</param>
        [JsonConstructor]
        public SystemBackupConfigResponse(string encPwFile, string fileTargetDirectory, int minAgeInDays, string sshPubKey, string target, string targetPass, string targetUser)
        {
            EncPwFile = encPwFile;
            FileTargetDirectory = fileTargetDirectory;
            MinAgeInDays = minAgeInDays;
            SshPubKey = sshPubKey;
            Target = target;
            TargetPass = targetPass;
            TargetUser = targetUser;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EncPwFile
        /// </summary>
        /// <example>/home/user-data/backup/secret_key.txt</example>
        [JsonPropertyName("enc_pw_file")]
        public string EncPwFile { get; set; }

        /// <summary>
        /// Gets or Sets FileTargetDirectory
        /// </summary>
        /// <example>/home/user-data/backup/encrypted</example>
        [JsonPropertyName("file_target_directory")]
        public string FileTargetDirectory { get; set; }

        /// <summary>
        /// Gets or Sets MinAgeInDays
        /// </summary>
        /// <example>3</example>
        [JsonPropertyName("min_age_in_days")]
        public int MinAgeInDays { get; set; }

        /// <summary>
        /// Gets or Sets SshPubKey
        /// </summary>
        /// <example>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDb root@box.example.com\n</example>
        [JsonPropertyName("ssh_pub_key")]
        public string SshPubKey { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        /// <example>s3://s3.eu-central-1.amazonaws.com/box-example-com</example>
        [JsonPropertyName("target")]
        public string Target { get; set; }

        /// <summary>
        /// Gets or Sets TargetPass
        /// </summary>
        [JsonPropertyName("target_pass")]
        public string TargetPass { get; set; }

        /// <summary>
        /// Gets or Sets TargetUser
        /// </summary>
        [JsonPropertyName("target_user")]
        public string TargetUser { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemBackupConfigResponse {\n");
            sb.Append("  EncPwFile: ").Append(EncPwFile).Append("\n");
            sb.Append("  FileTargetDirectory: ").Append(FileTargetDirectory).Append("\n");
            sb.Append("  MinAgeInDays: ").Append(MinAgeInDays).Append("\n");
            sb.Append("  SshPubKey: ").Append(SshPubKey).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TargetPass: ").Append(TargetPass).Append("\n");
            sb.Append("  TargetUser: ").Append(TargetUser).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MinAgeInDays (int) minimum
            if (this.MinAgeInDays < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinAgeInDays, must be a value greater than or equal to 1.", new [] { "MinAgeInDays" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemBackupConfigResponse" />
    /// </summary>
    public class SystemBackupConfigResponseJsonConverter : JsonConverter<SystemBackupConfigResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemBackupConfigResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemBackupConfigResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string? encPwFile = default;
            string? fileTargetDirectory = default;
            int? minAgeInDays = default;
            string? sshPubKey = default;
            string? target = default;
            string? targetPass = default;
            string? targetUser = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enc_pw_file":
                            encPwFile = utf8JsonReader.GetString();
                            break;
                        case "file_target_directory":
                            fileTargetDirectory = utf8JsonReader.GetString();
                            break;
                        case "min_age_in_days":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minAgeInDays = utf8JsonReader.GetInt32();
                            break;
                        case "ssh_pub_key":
                            sshPubKey = utf8JsonReader.GetString();
                            break;
                        case "target":
                            target = utf8JsonReader.GetString();
                            break;
                        case "target_pass":
                            targetPass = utf8JsonReader.GetString();
                            break;
                        case "target_user":
                            targetUser = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (encPwFile == null)
                throw new ArgumentNullException(nameof(encPwFile), "Property is required for class SystemBackupConfigResponse.");

            if (fileTargetDirectory == null)
                throw new ArgumentNullException(nameof(fileTargetDirectory), "Property is required for class SystemBackupConfigResponse.");

            if (minAgeInDays == null)
                throw new ArgumentNullException(nameof(minAgeInDays), "Property is required for class SystemBackupConfigResponse.");

            if (sshPubKey == null)
                throw new ArgumentNullException(nameof(sshPubKey), "Property is required for class SystemBackupConfigResponse.");

            if (target == null)
                throw new ArgumentNullException(nameof(target), "Property is required for class SystemBackupConfigResponse.");

            if (targetPass == null)
                throw new ArgumentNullException(nameof(targetPass), "Property is required for class SystemBackupConfigResponse.");

            if (targetUser == null)
                throw new ArgumentNullException(nameof(targetUser), "Property is required for class SystemBackupConfigResponse.");

            return new SystemBackupConfigResponse(encPwFile, fileTargetDirectory, minAgeInDays.Value, sshPubKey, target, targetPass, targetUser);
        }

        /// <summary>
        /// Serializes a <see cref="SystemBackupConfigResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemBackupConfigResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemBackupConfigResponse systemBackupConfigResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, systemBackupConfigResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemBackupConfigResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemBackupConfigResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, SystemBackupConfigResponse systemBackupConfigResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("enc_pw_file", systemBackupConfigResponse.EncPwFile);
            writer.WriteString("file_target_directory", systemBackupConfigResponse.FileTargetDirectory);
            writer.WriteNumber("min_age_in_days", systemBackupConfigResponse.MinAgeInDays);
            writer.WriteString("ssh_pub_key", systemBackupConfigResponse.SshPubKey);
            writer.WriteString("target", systemBackupConfigResponse.Target);
            writer.WriteString("target_pass", systemBackupConfigResponse.TargetPass);
            writer.WriteString("target_user", systemBackupConfigResponse.TargetUser);
        }
    }
}
