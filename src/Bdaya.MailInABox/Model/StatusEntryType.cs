// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Bdaya.MailInABox.Client.ClientUtils;

namespace Bdaya.MailInABox.Model
{
    /// <summary>
    /// System status entry type.
    /// </summary>
    /// <value>System status entry type.</value>
    public enum StatusEntryType
    {
        /// <summary>
        /// Enum Heading for value: heading
        /// </summary>
        Heading = 1,

        /// <summary>
        /// Enum Ok for value: ok
        /// </summary>
        Ok = 2,

        /// <summary>
        /// Enum Warning for value: warning
        /// </summary>
        Warning = 3,

        /// <summary>
        /// Enum Error for value: error
        /// </summary>
        Error = 4
    }

    /// <summary>
    /// Converts <see cref="StatusEntryType"/> to and from the JSON value
    /// </summary>
    public static class StatusEntryTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="StatusEntryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEntryType FromString(string value)
        {
            if (value.Equals("heading"))
                return StatusEntryType.Heading;

            if (value.Equals("ok"))
                return StatusEntryType.Ok;

            if (value.Equals("warning"))
                return StatusEntryType.Warning;

            if (value.Equals("error"))
                return StatusEntryType.Error;

            throw new NotImplementedException($"Could not convert value to type StatusEntryType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="StatusEntryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEntryType? FromStringOrDefault(string value)
        {
            if (value.Equals("heading"))
                return StatusEntryType.Heading;

            if (value.Equals("ok"))
                return StatusEntryType.Ok;

            if (value.Equals("warning"))
                return StatusEntryType.Warning;

            if (value.Equals("error"))
                return StatusEntryType.Error;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEntryType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(StatusEntryType value)
        {
            if (value == StatusEntryType.Heading)
                return "heading";

            if (value == StatusEntryType.Ok)
                return "ok";

            if (value == StatusEntryType.Warning)
                return "warning";

            if (value == StatusEntryType.Error)
                return "error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StatusEntryType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class StatusEntryTypeJsonConverter : JsonConverter<StatusEntryType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override StatusEntryType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            StatusEntryType? result = rawValue == null
                ? null
                : StatusEntryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the StatusEntryType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="statusEntryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, StatusEntryType statusEntryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(statusEntryType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StatusEntryType"/>
    /// </summary>
    public class StatusEntryTypeNullableJsonConverter : JsonConverter<StatusEntryType?>
    {
        /// <summary>
        /// Returns a StatusEntryType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override StatusEntryType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            StatusEntryType? result = rawValue == null
                ? null
                : StatusEntryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="statusEntryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, StatusEntryType? statusEntryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(statusEntryType?.ToString() ?? "null");
        }
    }
}
