// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Bdaya.MailInABox.Client;
using Bdaya.MailInABox.Api;
using Bdaya.MailInABox.Model;

namespace Bdaya.MailInABox.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMailApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MailApiEvents Events { get; }

        /// <summary>
        /// Add mail user
        /// </summary>
        /// <remarks>
        /// Adds a new mail user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="privileges"></param>
        /// <param name="email">Email format.</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> AddMailUserAsync(MailUserPrivilege privileges, string email, string password, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add mail user
        /// </summary>
        /// <remarks>
        /// Adds a new mail user.
        /// </remarks>
        /// <param name="privileges"></param>
        /// <param name="email">Email format.</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> AddMailUserOrDefaultAsync(MailUserPrivilege privileges, string email, string password, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add mail user privilege
        /// </summary>
        /// <remarks>
        /// Adds a privilege to an existing mail user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="privilege"></param>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> AddMailUserPrivilegeAsync(MailUserPrivilege privilege, string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add mail user privilege
        /// </summary>
        /// <remarks>
        /// Adds a privilege to an existing mail user.
        /// </remarks>
        /// <param name="privilege"></param>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> AddMailUserPrivilegeOrDefaultAsync(MailUserPrivilege privilege, string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get mail aliases
        /// </summary>
        /// <remarks>
        /// Returns all mail aliases.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;MailAliasByDomain&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<MailAliasByDomain>>> GetMailAliasesAsync(Option<MailAliasesResponseFormat> format = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get mail aliases
        /// </summary>
        /// <remarks>
        /// Returns all mail aliases.
        /// </remarks>
        /// <param name="format">The format of the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;List&lt;MailAliasByDomain&gt;&gt;?&gt;</returns>
        Task<ApiResponse<List<MailAliasByDomain>>?> GetMailAliasesOrDefaultAsync(Option<MailAliasesResponseFormat> format = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get mail domains
        /// </summary>
        /// <remarks>
        /// Returns all mail domains.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> GetMailDomainsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get mail domains
        /// </summary>
        /// <remarks>
        /// Returns all mail domains.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> GetMailDomainsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get mail user privileges
        /// </summary>
        /// <remarks>
        /// Returns all privileges for an existing mail user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email you want to get privileges for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;MailUserPrivilege&gt;&gt;</returns>
        Task<ApiResponse<MailUserPrivilege>> GetMailUserPrivilegesAsync(Option<string> email = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get mail user privileges
        /// </summary>
        /// <remarks>
        /// Returns all privileges for an existing mail user.
        /// </remarks>
        /// <param name="email">The email you want to get privileges for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;MailUserPrivilege&gt;?&gt;</returns>
        Task<ApiResponse<MailUserPrivilege>?> GetMailUserPrivilegesOrDefaultAsync(Option<string> email = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get mail users
        /// </summary>
        /// <remarks>
        /// Returns all mail users.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;MailUserByDomain&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<MailUserByDomain>>> GetMailUsersAsync(Option<MailUsersResponseFormat> format = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get mail users
        /// </summary>
        /// <remarks>
        /// Returns all mail users.
        /// </remarks>
        /// <param name="format">The format of the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;List&lt;MailUserByDomain&gt;&gt;?&gt;</returns>
        Task<ApiResponse<List<MailUserByDomain>>?> GetMailUsersOrDefaultAsync(Option<MailUsersResponseFormat> format = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove mail alias
        /// </summary>
        /// <remarks>
        /// Removes a mail alias.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> RemoveMailAliasAsync(string address, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove mail alias
        /// </summary>
        /// <remarks>
        /// Removes a mail alias.
        /// </remarks>
        /// <param name="address">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> RemoveMailAliasOrDefaultAsync(string address, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove mail user
        /// </summary>
        /// <remarks>
        /// Removes an existing mail user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> RemoveMailUserAsync(string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove mail user
        /// </summary>
        /// <remarks>
        /// Removes an existing mail user.
        /// </remarks>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> RemoveMailUserOrDefaultAsync(string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove mail user privilege
        /// </summary>
        /// <remarks>
        /// Removes a privilege from an existing mail user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="privilege"></param>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> RemoveMailUserPrivilegeAsync(MailUserPrivilege privilege, string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove mail user privilege
        /// </summary>
        /// <remarks>
        /// Removes a privilege from an existing mail user.
        /// </remarks>
        /// <param name="privilege"></param>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> RemoveMailUserPrivilegeOrDefaultAsync(MailUserPrivilege privilege, string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set mail user password
        /// </summary>
        /// <remarks>
        /// Sets a password for an existing mail user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email format.</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> SetMailUserPasswordAsync(string email, string password, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set mail user password
        /// </summary>
        /// <remarks>
        /// Sets a password for an existing mail user.
        /// </remarks>
        /// <param name="email">Email format.</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> SetMailUserPasswordOrDefaultAsync(string email, string password, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upsert mail alias
        /// </summary>
        /// <remarks>
        /// Adds or updates a mail alias. If updating, you need to set &#x60;update_if_exists: 1&#x60;. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateIfExists">Set to &#x60;1&#x60; when updating an alias.</param>
        /// <param name="address">Email format.</param>
        /// <param name="forwardsTo">If adding a regular or catch-all alias, the format needs to be &#x60;user@example.com&#x60;. Multiple address can be separated by newlines or commas.  If adding a domain alias, the format needs to be &#x60;@example.com&#x60;. </param>
        /// <param name="permittedSenders">Mail users that can send mail claiming to be from any address on the alias domain. Multiple address can be separated by newlines or commas.  Leave empty to allow any mail user listed in &#x60;forwards_to&#x60; to send mail claiming to be from any address on the alias domain. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> UpsertMailAliasAsync(int updateIfExists, string address, string forwardsTo, string? permittedSenders = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upsert mail alias
        /// </summary>
        /// <remarks>
        /// Adds or updates a mail alias. If updating, you need to set &#x60;update_if_exists: 1&#x60;. 
        /// </remarks>
        /// <param name="updateIfExists">Set to &#x60;1&#x60; when updating an alias.</param>
        /// <param name="address">Email format.</param>
        /// <param name="forwardsTo">If adding a regular or catch-all alias, the format needs to be &#x60;user@example.com&#x60;. Multiple address can be separated by newlines or commas.  If adding a domain alias, the format needs to be &#x60;@example.com&#x60;. </param>
        /// <param name="permittedSenders">Mail users that can send mail claiming to be from any address on the alias domain. Multiple address can be separated by newlines or commas.  Leave empty to allow any mail user listed in &#x60;forwards_to&#x60; to send mail claiming to be from any address on the alias domain. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> UpsertMailAliasOrDefaultAsync(int updateIfExists, string address, string forwardsTo, string? permittedSenders = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public class MailApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnAddMailUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddMailUser;

        internal void ExecuteOnAddMailUser(ApiResponse<string> apiResponse)
        {
            OnAddMailUser?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorAddMailUser(Exception exception)
        {
            OnErrorAddMailUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnAddMailUserPrivilege;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddMailUserPrivilege;

        internal void ExecuteOnAddMailUserPrivilege(ApiResponse<string> apiResponse)
        {
            OnAddMailUserPrivilege?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorAddMailUserPrivilege(Exception exception)
        {
            OnErrorAddMailUserPrivilege?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<List<MailAliasByDomain>>>? OnGetMailAliases;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMailAliases;

        internal void ExecuteOnGetMailAliases(ApiResponse<List<MailAliasByDomain>> apiResponse)
        {
            OnGetMailAliases?.Invoke(this, new ApiResponseEventArgs<List<MailAliasByDomain>>(apiResponse));
        }

        internal void ExecuteOnErrorGetMailAliases(Exception exception)
        {
            OnErrorGetMailAliases?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnGetMailDomains;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMailDomains;

        internal void ExecuteOnGetMailDomains(ApiResponse<string> apiResponse)
        {
            OnGetMailDomains?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorGetMailDomains(Exception exception)
        {
            OnErrorGetMailDomains?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<MailUserPrivilege>>? OnGetMailUserPrivileges;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMailUserPrivileges;

        internal void ExecuteOnGetMailUserPrivileges(ApiResponse<MailUserPrivilege> apiResponse)
        {
            OnGetMailUserPrivileges?.Invoke(this, new ApiResponseEventArgs<MailUserPrivilege>(apiResponse));
        }

        internal void ExecuteOnErrorGetMailUserPrivileges(Exception exception)
        {
            OnErrorGetMailUserPrivileges?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<List<MailUserByDomain>>>? OnGetMailUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMailUsers;

        internal void ExecuteOnGetMailUsers(ApiResponse<List<MailUserByDomain>> apiResponse)
        {
            OnGetMailUsers?.Invoke(this, new ApiResponseEventArgs<List<MailUserByDomain>>(apiResponse));
        }

        internal void ExecuteOnErrorGetMailUsers(Exception exception)
        {
            OnErrorGetMailUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnRemoveMailAlias;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveMailAlias;

        internal void ExecuteOnRemoveMailAlias(ApiResponse<string> apiResponse)
        {
            OnRemoveMailAlias?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorRemoveMailAlias(Exception exception)
        {
            OnErrorRemoveMailAlias?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnRemoveMailUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveMailUser;

        internal void ExecuteOnRemoveMailUser(ApiResponse<string> apiResponse)
        {
            OnRemoveMailUser?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorRemoveMailUser(Exception exception)
        {
            OnErrorRemoveMailUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnRemoveMailUserPrivilege;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveMailUserPrivilege;

        internal void ExecuteOnRemoveMailUserPrivilege(ApiResponse<string> apiResponse)
        {
            OnRemoveMailUserPrivilege?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorRemoveMailUserPrivilege(Exception exception)
        {
            OnErrorRemoveMailUserPrivilege?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnSetMailUserPassword;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetMailUserPassword;

        internal void ExecuteOnSetMailUserPassword(ApiResponse<string> apiResponse)
        {
            OnSetMailUserPassword?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorSetMailUserPassword(Exception exception)
        {
            OnErrorSetMailUserPassword?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnUpsertMailAlias;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpsertMailAlias;

        internal void ExecuteOnUpsertMailAlias(ApiResponse<string> apiResponse)
        {
            OnUpsertMailAlias?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorUpsertMailAlias(Exception exception)
        {
            OnErrorUpsertMailAlias?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MailApi : IMailApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MailApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MailApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public ITokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MailApi(ILogger<MailApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MailApiEvents mailApiEvents,
            ITokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
            Events = mailApiEvents;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatAddMailUser(MailUserPrivilege privileges, ref string email, ref string password);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="privileges"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        private void ValidateAddMailUser(MailUserPrivilege privileges, string email, string password)
        {
            if (privileges == null)
                throw new ArgumentNullException(nameof(privileges));

            if (email == null)
                throw new ArgumentNullException(nameof(email));

            if (password == null)
                throw new ArgumentNullException(nameof(password));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="privileges"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        private void AfterAddMailUserDefaultImplementation(ApiResponse<string> apiResponseLocalVar, MailUserPrivilege privileges, string email, string password)
        {
            bool suppressDefaultLog = false;
            AfterAddMailUser(ref suppressDefaultLog, apiResponseLocalVar, privileges, email, password);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="privileges"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        partial void AfterAddMailUser(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, MailUserPrivilege privileges, string email, string password);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="privileges"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        private void OnErrorAddMailUserDefaultImplementation(Exception exception, string pathFormat, string path, MailUserPrivilege privileges, string email, string password)
        {
            bool suppressDefaultLog = false;
            OnErrorAddMailUser(ref suppressDefaultLog, exception, pathFormat, path, privileges, email, password);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="privileges"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        partial void OnErrorAddMailUser(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, MailUserPrivilege privileges, string email, string password);

        /// <summary>
        /// Add mail user Adds a new mail user.
        /// </summary>
        /// <param name="privileges"></param>
        /// <param name="email">Email format.</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> AddMailUserOrDefaultAsync(MailUserPrivilege privileges, string email, string password, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddMailUserAsync(privileges, email, password, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add mail user Adds a new mail user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="privileges"></param>
        /// <param name="email">Email format.</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> AddMailUserAsync(MailUserPrivilege privileges, string email, string password, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddMailUser(privileges, email, password);

                FormatAddMailUser(privileges, ref email, ref password);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/users/add";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("privileges", ClientUtils.ParameterToString(privileges)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("email", ClientUtils.ParameterToString(email)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("password", ClientUtils.ParameterToString(password)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/users/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddMailUserDefaultImplementation(apiResponseLocalVar, privileges, email, password);

                        Events.ExecuteOnAddMailUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddMailUserDefaultImplementation(e, "/mail/users/add", uriBuilderLocalVar.Path, privileges, email, password);
                Events.ExecuteOnErrorAddMailUser(e);
                throw;
            }
        }

        partial void FormatAddMailUserPrivilege(MailUserPrivilege privilege, ref string email);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="privilege"></param>
        /// <param name="email"></param>
        /// <returns></returns>
        private void ValidateAddMailUserPrivilege(MailUserPrivilege privilege, string email)
        {
            if (privilege == null)
                throw new ArgumentNullException(nameof(privilege));

            if (email == null)
                throw new ArgumentNullException(nameof(email));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="privilege"></param>
        /// <param name="email"></param>
        private void AfterAddMailUserPrivilegeDefaultImplementation(ApiResponse<string> apiResponseLocalVar, MailUserPrivilege privilege, string email)
        {
            bool suppressDefaultLog = false;
            AfterAddMailUserPrivilege(ref suppressDefaultLog, apiResponseLocalVar, privilege, email);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="privilege"></param>
        /// <param name="email"></param>
        partial void AfterAddMailUserPrivilege(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, MailUserPrivilege privilege, string email);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="privilege"></param>
        /// <param name="email"></param>
        private void OnErrorAddMailUserPrivilegeDefaultImplementation(Exception exception, string pathFormat, string path, MailUserPrivilege privilege, string email)
        {
            bool suppressDefaultLog = false;
            OnErrorAddMailUserPrivilege(ref suppressDefaultLog, exception, pathFormat, path, privilege, email);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="privilege"></param>
        /// <param name="email"></param>
        partial void OnErrorAddMailUserPrivilege(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, MailUserPrivilege privilege, string email);

        /// <summary>
        /// Add mail user privilege Adds a privilege to an existing mail user.
        /// </summary>
        /// <param name="privilege"></param>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> AddMailUserPrivilegeOrDefaultAsync(MailUserPrivilege privilege, string email, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddMailUserPrivilegeAsync(privilege, email, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add mail user privilege Adds a privilege to an existing mail user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="privilege"></param>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> AddMailUserPrivilegeAsync(MailUserPrivilege privilege, string email, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddMailUserPrivilege(privilege, email);

                FormatAddMailUserPrivilege(privilege, ref email);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/users/privileges/add";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("privilege", ClientUtils.ParameterToString(privilege)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("email", ClientUtils.ParameterToString(email)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/users/privileges/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddMailUserPrivilegeDefaultImplementation(apiResponseLocalVar, privilege, email);

                        Events.ExecuteOnAddMailUserPrivilege(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddMailUserPrivilegeDefaultImplementation(e, "/mail/users/privileges/add", uriBuilderLocalVar.Path, privilege, email);
                Events.ExecuteOnErrorAddMailUserPrivilege(e);
                throw;
            }
        }

        partial void FormatGetMailAliases(Option<MailAliasesResponseFormat> format);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="format"></param>
        /// <returns></returns>
        private void ValidateGetMailAliases(Option<MailAliasesResponseFormat> format)
        {
            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="format"></param>
        private void AfterGetMailAliasesDefaultImplementation(ApiResponse<List<MailAliasByDomain>> apiResponseLocalVar, Option<MailAliasesResponseFormat> format)
        {
            bool suppressDefaultLog = false;
            AfterGetMailAliases(ref suppressDefaultLog, apiResponseLocalVar, format);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="format"></param>
        partial void AfterGetMailAliases(ref bool suppressDefaultLog, ApiResponse<List<MailAliasByDomain>> apiResponseLocalVar, Option<MailAliasesResponseFormat> format);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="format"></param>
        private void OnErrorGetMailAliasesDefaultImplementation(Exception exception, string pathFormat, string path, Option<MailAliasesResponseFormat> format)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMailAliases(ref suppressDefaultLog, exception, pathFormat, path, format);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="format"></param>
        partial void OnErrorGetMailAliases(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<MailAliasesResponseFormat> format);

        /// <summary>
        /// Get mail aliases Returns all mail aliases.
        /// </summary>
        /// <param name="format">The format of the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<MailAliasByDomain>>?> GetMailAliasesOrDefaultAsync(Option<MailAliasesResponseFormat> format = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMailAliasesAsync(format, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get mail aliases Returns all mail aliases.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<MailAliasByDomain>>> GetMailAliasesAsync(Option<MailAliasesResponseFormat> format = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetMailAliases(format);

                FormatGetMailAliases(format);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/aliases";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (format.IsSet)
                        parseQueryStringLocalVar["format"] = format.Value.ToString().ToLower();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<List<MailAliasByDomain>> apiResponseLocalVar = new ApiResponse<List<MailAliasByDomain>>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/aliases", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMailAliasesDefaultImplementation(apiResponseLocalVar, format);

                        Events.ExecuteOnGetMailAliases(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMailAliasesDefaultImplementation(e, "/mail/aliases", uriBuilderLocalVar.Path, format);
                Events.ExecuteOnErrorGetMailAliases(e);
                throw;
            }
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMailDomainsDefaultImplementation(ApiResponse<string> apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMailDomains(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMailDomains(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMailDomainsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMailDomains(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMailDomains(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Get mail domains Returns all mail domains.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> GetMailDomainsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMailDomainsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get mail domains Returns all mail domains.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> GetMailDomainsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/domains";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/domains", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMailDomainsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMailDomains(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMailDomainsDefaultImplementation(e, "/mail/domains", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMailDomains(e);
                throw;
            }
        }

        partial void FormatGetMailUserPrivileges(ref Option<string> email);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        private void ValidateGetMailUserPrivileges(Option<string> email)
        {
            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        private void AfterGetMailUserPrivilegesDefaultImplementation(ApiResponse<MailUserPrivilege> apiResponseLocalVar, Option<string> email)
        {
            bool suppressDefaultLog = false;
            AfterGetMailUserPrivileges(ref suppressDefaultLog, apiResponseLocalVar, email);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        partial void AfterGetMailUserPrivileges(ref bool suppressDefaultLog, ApiResponse<MailUserPrivilege> apiResponseLocalVar, Option<string> email);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="email"></param>
        private void OnErrorGetMailUserPrivilegesDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> email)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMailUserPrivileges(ref suppressDefaultLog, exception, pathFormat, path, email);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="email"></param>
        partial void OnErrorGetMailUserPrivileges(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> email);

        /// <summary>
        /// Get mail user privileges Returns all privileges for an existing mail user.
        /// </summary>
        /// <param name="email">The email you want to get privileges for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="MailUserPrivilege"/></returns>
        public async Task<ApiResponse<MailUserPrivilege>?> GetMailUserPrivilegesOrDefaultAsync(Option<string> email = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMailUserPrivilegesAsync(email, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get mail user privileges Returns all privileges for an existing mail user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email you want to get privileges for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="MailUserPrivilege"/></returns>
        public async Task<ApiResponse<MailUserPrivilege>> GetMailUserPrivilegesAsync(Option<string> email = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetMailUserPrivileges(email);

                FormatGetMailUserPrivileges(ref email);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/users/privileges";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (email.IsSet)
                        parseQueryStringLocalVar["email"] = email.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<MailUserPrivilege> apiResponseLocalVar = new ApiResponse<MailUserPrivilege>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/users/privileges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMailUserPrivilegesDefaultImplementation(apiResponseLocalVar, email);

                        Events.ExecuteOnGetMailUserPrivileges(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMailUserPrivilegesDefaultImplementation(e, "/mail/users/privileges", uriBuilderLocalVar.Path, email);
                Events.ExecuteOnErrorGetMailUserPrivileges(e);
                throw;
            }
        }

        partial void FormatGetMailUsers(Option<MailUsersResponseFormat> format);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="format"></param>
        /// <returns></returns>
        private void ValidateGetMailUsers(Option<MailUsersResponseFormat> format)
        {
            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="format"></param>
        private void AfterGetMailUsersDefaultImplementation(ApiResponse<List<MailUserByDomain>> apiResponseLocalVar, Option<MailUsersResponseFormat> format)
        {
            bool suppressDefaultLog = false;
            AfterGetMailUsers(ref suppressDefaultLog, apiResponseLocalVar, format);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="format"></param>
        partial void AfterGetMailUsers(ref bool suppressDefaultLog, ApiResponse<List<MailUserByDomain>> apiResponseLocalVar, Option<MailUsersResponseFormat> format);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="format"></param>
        private void OnErrorGetMailUsersDefaultImplementation(Exception exception, string pathFormat, string path, Option<MailUsersResponseFormat> format)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMailUsers(ref suppressDefaultLog, exception, pathFormat, path, format);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="format"></param>
        partial void OnErrorGetMailUsers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<MailUsersResponseFormat> format);

        /// <summary>
        /// Get mail users Returns all mail users.
        /// </summary>
        /// <param name="format">The format of the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<MailUserByDomain>>?> GetMailUsersOrDefaultAsync(Option<MailUsersResponseFormat> format = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMailUsersAsync(format, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get mail users Returns all mail users.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The format of the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<MailUserByDomain>>> GetMailUsersAsync(Option<MailUsersResponseFormat> format = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetMailUsers(format);

                FormatGetMailUsers(format);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/users";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (format.IsSet)
                        parseQueryStringLocalVar["format"] = format.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<List<MailUserByDomain>> apiResponseLocalVar = new ApiResponse<List<MailUserByDomain>>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/users", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMailUsersDefaultImplementation(apiResponseLocalVar, format);

                        Events.ExecuteOnGetMailUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMailUsersDefaultImplementation(e, "/mail/users", uriBuilderLocalVar.Path, format);
                Events.ExecuteOnErrorGetMailUsers(e);
                throw;
            }
        }

        partial void FormatRemoveMailAlias(ref string address);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="address"></param>
        /// <returns></returns>
        private void ValidateRemoveMailAlias(string address)
        {
            if (address == null)
                throw new ArgumentNullException(nameof(address));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="address"></param>
        private void AfterRemoveMailAliasDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string address)
        {
            bool suppressDefaultLog = false;
            AfterRemoveMailAlias(ref suppressDefaultLog, apiResponseLocalVar, address);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="address"></param>
        partial void AfterRemoveMailAlias(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string address);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="address"></param>
        private void OnErrorRemoveMailAliasDefaultImplementation(Exception exception, string pathFormat, string path, string address)
        {
            bool suppressDefaultLog = false;
            OnErrorRemoveMailAlias(ref suppressDefaultLog, exception, pathFormat, path, address);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="address"></param>
        partial void OnErrorRemoveMailAlias(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string address);

        /// <summary>
        /// Remove mail alias Removes a mail alias.
        /// </summary>
        /// <param name="address">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> RemoveMailAliasOrDefaultAsync(string address, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveMailAliasAsync(address, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove mail alias Removes a mail alias.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> RemoveMailAliasAsync(string address, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveMailAlias(address);

                FormatRemoveMailAlias(ref address);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/aliases/remove";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("address", ClientUtils.ParameterToString(address)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/aliases/remove", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveMailAliasDefaultImplementation(apiResponseLocalVar, address);

                        Events.ExecuteOnRemoveMailAlias(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveMailAliasDefaultImplementation(e, "/mail/aliases/remove", uriBuilderLocalVar.Path, address);
                Events.ExecuteOnErrorRemoveMailAlias(e);
                throw;
            }
        }

        partial void FormatRemoveMailUser(ref string email);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        private void ValidateRemoveMailUser(string email)
        {
            if (email == null)
                throw new ArgumentNullException(nameof(email));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        private void AfterRemoveMailUserDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string email)
        {
            bool suppressDefaultLog = false;
            AfterRemoveMailUser(ref suppressDefaultLog, apiResponseLocalVar, email);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        partial void AfterRemoveMailUser(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string email);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="email"></param>
        private void OnErrorRemoveMailUserDefaultImplementation(Exception exception, string pathFormat, string path, string email)
        {
            bool suppressDefaultLog = false;
            OnErrorRemoveMailUser(ref suppressDefaultLog, exception, pathFormat, path, email);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="email"></param>
        partial void OnErrorRemoveMailUser(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string email);

        /// <summary>
        /// Remove mail user Removes an existing mail user.
        /// </summary>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> RemoveMailUserOrDefaultAsync(string email, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveMailUserAsync(email, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove mail user Removes an existing mail user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> RemoveMailUserAsync(string email, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveMailUser(email);

                FormatRemoveMailUser(ref email);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/users/remove";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("email", ClientUtils.ParameterToString(email)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/users/remove", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveMailUserDefaultImplementation(apiResponseLocalVar, email);

                        Events.ExecuteOnRemoveMailUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveMailUserDefaultImplementation(e, "/mail/users/remove", uriBuilderLocalVar.Path, email);
                Events.ExecuteOnErrorRemoveMailUser(e);
                throw;
            }
        }

        partial void FormatRemoveMailUserPrivilege(MailUserPrivilege privilege, ref string email);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="privilege"></param>
        /// <param name="email"></param>
        /// <returns></returns>
        private void ValidateRemoveMailUserPrivilege(MailUserPrivilege privilege, string email)
        {
            if (privilege == null)
                throw new ArgumentNullException(nameof(privilege));

            if (email == null)
                throw new ArgumentNullException(nameof(email));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="privilege"></param>
        /// <param name="email"></param>
        private void AfterRemoveMailUserPrivilegeDefaultImplementation(ApiResponse<string> apiResponseLocalVar, MailUserPrivilege privilege, string email)
        {
            bool suppressDefaultLog = false;
            AfterRemoveMailUserPrivilege(ref suppressDefaultLog, apiResponseLocalVar, privilege, email);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="privilege"></param>
        /// <param name="email"></param>
        partial void AfterRemoveMailUserPrivilege(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, MailUserPrivilege privilege, string email);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="privilege"></param>
        /// <param name="email"></param>
        private void OnErrorRemoveMailUserPrivilegeDefaultImplementation(Exception exception, string pathFormat, string path, MailUserPrivilege privilege, string email)
        {
            bool suppressDefaultLog = false;
            OnErrorRemoveMailUserPrivilege(ref suppressDefaultLog, exception, pathFormat, path, privilege, email);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="privilege"></param>
        /// <param name="email"></param>
        partial void OnErrorRemoveMailUserPrivilege(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, MailUserPrivilege privilege, string email);

        /// <summary>
        /// Remove mail user privilege Removes a privilege from an existing mail user.
        /// </summary>
        /// <param name="privilege"></param>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> RemoveMailUserPrivilegeOrDefaultAsync(MailUserPrivilege privilege, string email, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveMailUserPrivilegeAsync(privilege, email, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove mail user privilege Removes a privilege from an existing mail user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="privilege"></param>
        /// <param name="email">Email format.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> RemoveMailUserPrivilegeAsync(MailUserPrivilege privilege, string email, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveMailUserPrivilege(privilege, email);

                FormatRemoveMailUserPrivilege(privilege, ref email);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/users/privileges/remove";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("privilege", ClientUtils.ParameterToString(privilege)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("email", ClientUtils.ParameterToString(email)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/users/privileges/remove", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveMailUserPrivilegeDefaultImplementation(apiResponseLocalVar, privilege, email);

                        Events.ExecuteOnRemoveMailUserPrivilege(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveMailUserPrivilegeDefaultImplementation(e, "/mail/users/privileges/remove", uriBuilderLocalVar.Path, privilege, email);
                Events.ExecuteOnErrorRemoveMailUserPrivilege(e);
                throw;
            }
        }

        partial void FormatSetMailUserPassword(ref string email, ref string password);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        private void ValidateSetMailUserPassword(string email, string password)
        {
            if (email == null)
                throw new ArgumentNullException(nameof(email));

            if (password == null)
                throw new ArgumentNullException(nameof(password));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        private void AfterSetMailUserPasswordDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string email, string password)
        {
            bool suppressDefaultLog = false;
            AfterSetMailUserPassword(ref suppressDefaultLog, apiResponseLocalVar, email, password);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        partial void AfterSetMailUserPassword(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string email, string password);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        private void OnErrorSetMailUserPasswordDefaultImplementation(Exception exception, string pathFormat, string path, string email, string password)
        {
            bool suppressDefaultLog = false;
            OnErrorSetMailUserPassword(ref suppressDefaultLog, exception, pathFormat, path, email, password);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        partial void OnErrorSetMailUserPassword(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string email, string password);

        /// <summary>
        /// Set mail user password Sets a password for an existing mail user.
        /// </summary>
        /// <param name="email">Email format.</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> SetMailUserPasswordOrDefaultAsync(string email, string password, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetMailUserPasswordAsync(email, password, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set mail user password Sets a password for an existing mail user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email format.</param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> SetMailUserPasswordAsync(string email, string password, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetMailUserPassword(email, password);

                FormatSetMailUserPassword(ref email, ref password);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/users/password";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("email", ClientUtils.ParameterToString(email)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("password", ClientUtils.ParameterToString(password)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/users/password", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetMailUserPasswordDefaultImplementation(apiResponseLocalVar, email, password);

                        Events.ExecuteOnSetMailUserPassword(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetMailUserPasswordDefaultImplementation(e, "/mail/users/password", uriBuilderLocalVar.Path, email, password);
                Events.ExecuteOnErrorSetMailUserPassword(e);
                throw;
            }
        }

        partial void FormatUpsertMailAlias(ref int updateIfExists, ref string address, ref string forwardsTo, ref string? permittedSenders);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="address"></param>
        /// <param name="forwardsTo"></param>
        /// <returns></returns>
        private void ValidateUpsertMailAlias(string address, string forwardsTo)
        {
            if (address == null)
                throw new ArgumentNullException(nameof(address));

            if (forwardsTo == null)
                throw new ArgumentNullException(nameof(forwardsTo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updateIfExists"></param>
        /// <param name="address"></param>
        /// <param name="forwardsTo"></param>
        /// <param name="permittedSenders"></param>
        private void AfterUpsertMailAliasDefaultImplementation(ApiResponse<string> apiResponseLocalVar, int updateIfExists, string address, string forwardsTo, string? permittedSenders)
        {
            bool suppressDefaultLog = false;
            AfterUpsertMailAlias(ref suppressDefaultLog, apiResponseLocalVar, updateIfExists, address, forwardsTo, permittedSenders);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updateIfExists"></param>
        /// <param name="address"></param>
        /// <param name="forwardsTo"></param>
        /// <param name="permittedSenders"></param>
        partial void AfterUpsertMailAlias(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, int updateIfExists, string address, string forwardsTo, string? permittedSenders);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="updateIfExists"></param>
        /// <param name="address"></param>
        /// <param name="forwardsTo"></param>
        /// <param name="permittedSenders"></param>
        private void OnErrorUpsertMailAliasDefaultImplementation(Exception exception, string pathFormat, string path, int updateIfExists, string address, string forwardsTo, string? permittedSenders)
        {
            bool suppressDefaultLog = false;
            OnErrorUpsertMailAlias(ref suppressDefaultLog, exception, pathFormat, path, updateIfExists, address, forwardsTo, permittedSenders);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="updateIfExists"></param>
        /// <param name="address"></param>
        /// <param name="forwardsTo"></param>
        /// <param name="permittedSenders"></param>
        partial void OnErrorUpsertMailAlias(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, int updateIfExists, string address, string forwardsTo, string? permittedSenders);

        /// <summary>
        /// Upsert mail alias Adds or updates a mail alias. If updating, you need to set &#x60;update_if_exists: 1&#x60;. 
        /// </summary>
        /// <param name="updateIfExists">Set to &#x60;1&#x60; when updating an alias.</param>
        /// <param name="address">Email format.</param>
        /// <param name="forwardsTo">If adding a regular or catch-all alias, the format needs to be &#x60;user@example.com&#x60;. Multiple address can be separated by newlines or commas.  If adding a domain alias, the format needs to be &#x60;@example.com&#x60;. </param>
        /// <param name="permittedSenders">Mail users that can send mail claiming to be from any address on the alias domain. Multiple address can be separated by newlines or commas.  Leave empty to allow any mail user listed in &#x60;forwards_to&#x60; to send mail claiming to be from any address on the alias domain. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> UpsertMailAliasOrDefaultAsync(int updateIfExists, string address, string forwardsTo, string? permittedSenders = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpsertMailAliasAsync(updateIfExists, address, forwardsTo, permittedSenders, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upsert mail alias Adds or updates a mail alias. If updating, you need to set &#x60;update_if_exists: 1&#x60;. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateIfExists">Set to &#x60;1&#x60; when updating an alias.</param>
        /// <param name="address">Email format.</param>
        /// <param name="forwardsTo">If adding a regular or catch-all alias, the format needs to be &#x60;user@example.com&#x60;. Multiple address can be separated by newlines or commas.  If adding a domain alias, the format needs to be &#x60;@example.com&#x60;. </param>
        /// <param name="permittedSenders">Mail users that can send mail claiming to be from any address on the alias domain. Multiple address can be separated by newlines or commas.  Leave empty to allow any mail user listed in &#x60;forwards_to&#x60; to send mail claiming to be from any address on the alias domain. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> UpsertMailAliasAsync(int updateIfExists, string address, string forwardsTo, string? permittedSenders = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpsertMailAlias(address, forwardsTo);

                FormatUpsertMailAlias(ref updateIfExists, ref address, ref forwardsTo, ref permittedSenders);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mail/aliases/add";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("update_if_exists", ClientUtils.ParameterToString(updateIfExists)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("address", ClientUtils.ParameterToString(address)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("forwards_to", ClientUtils.ParameterToString(forwardsTo)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("permitted_senders", ClientUtils.ParameterToString(permittedSenders)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail/aliases/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpsertMailAliasDefaultImplementation(apiResponseLocalVar, updateIfExists, address, forwardsTo, permittedSenders);

                        Events.ExecuteOnUpsertMailAlias(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpsertMailAliasDefaultImplementation(e, "/mail/aliases/add", uriBuilderLocalVar.Path, updateIfExists, address, forwardsTo, permittedSenders);
                Events.ExecuteOnErrorUpsertMailAlias(e);
                throw;
            }
        }
    }
}
