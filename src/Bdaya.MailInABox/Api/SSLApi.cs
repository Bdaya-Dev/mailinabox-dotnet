// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Bdaya.MailInABox.Client;
using Bdaya.MailInABox.Api;
using Bdaya.MailInABox.Model;

namespace Bdaya.MailInABox.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISSLApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SSLApiEvents Events { get; }

        /// <summary>
        /// Generate SSL CSR
        /// </summary>
        /// <remarks>
        /// Generates a Certificate Signing Request (CSR) for a domain &amp; country code. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain to generate CSR for.</param>
        /// <param name="countrycode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> GenerateSSLCSRAsync(string domain, string countrycode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate SSL CSR
        /// </summary>
        /// <remarks>
        /// Generates a Certificate Signing Request (CSR) for a domain &amp; country code. 
        /// </remarks>
        /// <param name="domain">Domain to generate CSR for.</param>
        /// <param name="countrycode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> GenerateSSLCSROrDefaultAsync(string domain, string countrycode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SSL status
        /// </summary>
        /// <remarks>
        /// Returns the SSL status for all domains.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;SSLStatusResponse&gt;&gt;</returns>
        Task<ApiResponse<SSLStatusResponse>> GetSSLStatusAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SSL status
        /// </summary>
        /// <remarks>
        /// Returns the SSL status for all domains.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;SSLStatusResponse&gt;?&gt;</returns>
        Task<ApiResponse<SSLStatusResponse>?> GetSSLStatusOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Install SSL certificate
        /// </summary>
        /// <remarks>
        /// Installs a custom certificate. The chain certificate is optional. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Hostname format.</param>
        /// <param name="cert">TLS/SSL certificate.</param>
        /// <param name="chain">TLS/SSL intermediate chain (if provided, else empty string).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> InstallSSLCertificateAsync(string domain, string cert, string chain, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Install SSL certificate
        /// </summary>
        /// <remarks>
        /// Installs a custom certificate. The chain certificate is optional. 
        /// </remarks>
        /// <param name="domain">Hostname format.</param>
        /// <param name="cert">TLS/SSL certificate.</param>
        /// <param name="chain">TLS/SSL intermediate chain (if provided, else empty string).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> InstallSSLCertificateOrDefaultAsync(string domain, string cert, string chain, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Provision SSL certificates
        /// </summary>
        /// <remarks>
        /// Provisions certificates for all domains. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;SSLCertificatesProvisionResponse&gt;&gt;</returns>
        Task<ApiResponse<SSLCertificatesProvisionResponse>> ProvisionSSLCertificatesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Provision SSL certificates
        /// </summary>
        /// <remarks>
        /// Provisions certificates for all domains. 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;SSLCertificatesProvisionResponse&gt;?&gt;</returns>
        Task<ApiResponse<SSLCertificatesProvisionResponse>?> ProvisionSSLCertificatesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public class SSLApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnGenerateSSLCSR;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateSSLCSR;

        internal void ExecuteOnGenerateSSLCSR(ApiResponse<string> apiResponse)
        {
            OnGenerateSSLCSR?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorGenerateSSLCSR(Exception exception)
        {
            OnErrorGenerateSSLCSR?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<SSLStatusResponse>>? OnGetSSLStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSSLStatus;

        internal void ExecuteOnGetSSLStatus(ApiResponse<SSLStatusResponse> apiResponse)
        {
            OnGetSSLStatus?.Invoke(this, new ApiResponseEventArgs<SSLStatusResponse>(apiResponse));
        }

        internal void ExecuteOnErrorGetSSLStatus(Exception exception)
        {
            OnErrorGetSSLStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnInstallSSLCertificate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallSSLCertificate;

        internal void ExecuteOnInstallSSLCertificate(ApiResponse<string> apiResponse)
        {
            OnInstallSSLCertificate?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorInstallSSLCertificate(Exception exception)
        {
            OnErrorInstallSSLCertificate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<SSLCertificatesProvisionResponse>>? OnProvisionSSLCertificates;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProvisionSSLCertificates;

        internal void ExecuteOnProvisionSSLCertificates(ApiResponse<SSLCertificatesProvisionResponse> apiResponse)
        {
            OnProvisionSSLCertificates?.Invoke(this, new ApiResponseEventArgs<SSLCertificatesProvisionResponse>(apiResponse));
        }

        internal void ExecuteOnErrorProvisionSSLCertificates(Exception exception)
        {
            OnErrorProvisionSSLCertificates?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SSLApi : ISSLApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SSLApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SSLApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public ITokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SSLApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SSLApi(ILogger<SSLApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SSLApiEvents sSLApiEvents,
            ITokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
            Events = sSLApiEvents;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatGenerateSSLCSR(ref string domain, ref string countrycode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="domain"></param>
        /// <param name="countrycode"></param>
        /// <returns></returns>
        private void ValidateGenerateSSLCSR(string domain, string countrycode)
        {
            if (domain == null)
                throw new ArgumentNullException(nameof(domain));

            if (countrycode == null)
                throw new ArgumentNullException(nameof(countrycode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="domain"></param>
        /// <param name="countrycode"></param>
        private void AfterGenerateSSLCSRDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string domain, string countrycode)
        {
            bool suppressDefaultLog = false;
            AfterGenerateSSLCSR(ref suppressDefaultLog, apiResponseLocalVar, domain, countrycode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="domain"></param>
        /// <param name="countrycode"></param>
        partial void AfterGenerateSSLCSR(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string domain, string countrycode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="domain"></param>
        /// <param name="countrycode"></param>
        private void OnErrorGenerateSSLCSRDefaultImplementation(Exception exception, string pathFormat, string path, string domain, string countrycode)
        {
            bool suppressDefaultLog = false;
            OnErrorGenerateSSLCSR(ref suppressDefaultLog, exception, pathFormat, path, domain, countrycode);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="domain"></param>
        /// <param name="countrycode"></param>
        partial void OnErrorGenerateSSLCSR(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string domain, string countrycode);

        /// <summary>
        /// Generate SSL CSR Generates a Certificate Signing Request (CSR) for a domain &amp; country code. 
        /// </summary>
        /// <param name="domain">Domain to generate CSR for.</param>
        /// <param name="countrycode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> GenerateSSLCSROrDefaultAsync(string domain, string countrycode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateSSLCSRAsync(domain, countrycode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate SSL CSR Generates a Certificate Signing Request (CSR) for a domain &amp; country code. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain to generate CSR for.</param>
        /// <param name="countrycode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> GenerateSSLCSRAsync(string domain, string countrycode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateSSLCSR(domain, countrycode);

                FormatGenerateSSLCSR(ref domain, ref countrycode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ssl/csr/{domain}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdomain%7D", Uri.EscapeDataString(domain.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("countrycode", ClientUtils.ParameterToString(countrycode)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ssl/csr/{domain}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateSSLCSRDefaultImplementation(apiResponseLocalVar, domain, countrycode);

                        Events.ExecuteOnGenerateSSLCSR(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateSSLCSRDefaultImplementation(e, "/ssl/csr/{domain}", uriBuilderLocalVar.Path, domain, countrycode);
                Events.ExecuteOnErrorGenerateSSLCSR(e);
                throw;
            }
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetSSLStatusDefaultImplementation(ApiResponse<SSLStatusResponse> apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetSSLStatus(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetSSLStatus(ref bool suppressDefaultLog, ApiResponse<SSLStatusResponse> apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetSSLStatusDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetSSLStatus(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetSSLStatus(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Get SSL status Returns the SSL status for all domains.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="SSLStatusResponse"/></returns>
        public async Task<ApiResponse<SSLStatusResponse>?> GetSSLStatusOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSSLStatusAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get SSL status Returns the SSL status for all domains.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="SSLStatusResponse"/></returns>
        public async Task<ApiResponse<SSLStatusResponse>> GetSSLStatusAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ssl/status";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<SSLStatusResponse> apiResponseLocalVar = new ApiResponse<SSLStatusResponse>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ssl/status", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSSLStatusDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetSSLStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSSLStatusDefaultImplementation(e, "/ssl/status", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetSSLStatus(e);
                throw;
            }
        }

        partial void FormatInstallSSLCertificate(ref string domain, ref string cert, ref string chain);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="domain"></param>
        /// <param name="cert"></param>
        /// <param name="chain"></param>
        /// <returns></returns>
        private void ValidateInstallSSLCertificate(string domain, string cert, string chain)
        {
            if (domain == null)
                throw new ArgumentNullException(nameof(domain));

            if (cert == null)
                throw new ArgumentNullException(nameof(cert));

            if (chain == null)
                throw new ArgumentNullException(nameof(chain));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="domain"></param>
        /// <param name="cert"></param>
        /// <param name="chain"></param>
        private void AfterInstallSSLCertificateDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string domain, string cert, string chain)
        {
            bool suppressDefaultLog = false;
            AfterInstallSSLCertificate(ref suppressDefaultLog, apiResponseLocalVar, domain, cert, chain);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="domain"></param>
        /// <param name="cert"></param>
        /// <param name="chain"></param>
        partial void AfterInstallSSLCertificate(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string domain, string cert, string chain);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="domain"></param>
        /// <param name="cert"></param>
        /// <param name="chain"></param>
        private void OnErrorInstallSSLCertificateDefaultImplementation(Exception exception, string pathFormat, string path, string domain, string cert, string chain)
        {
            bool suppressDefaultLog = false;
            OnErrorInstallSSLCertificate(ref suppressDefaultLog, exception, pathFormat, path, domain, cert, chain);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="domain"></param>
        /// <param name="cert"></param>
        /// <param name="chain"></param>
        partial void OnErrorInstallSSLCertificate(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string domain, string cert, string chain);

        /// <summary>
        /// Install SSL certificate Installs a custom certificate. The chain certificate is optional. 
        /// </summary>
        /// <param name="domain">Hostname format.</param>
        /// <param name="cert">TLS/SSL certificate.</param>
        /// <param name="chain">TLS/SSL intermediate chain (if provided, else empty string).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> InstallSSLCertificateOrDefaultAsync(string domain, string cert, string chain, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallSSLCertificateAsync(domain, cert, chain, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Install SSL certificate Installs a custom certificate. The chain certificate is optional. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Hostname format.</param>
        /// <param name="cert">TLS/SSL certificate.</param>
        /// <param name="chain">TLS/SSL intermediate chain (if provided, else empty string).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> InstallSSLCertificateAsync(string domain, string cert, string chain, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallSSLCertificate(domain, cert, chain);

                FormatInstallSSLCertificate(ref domain, ref cert, ref chain);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ssl/install";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("domain", ClientUtils.ParameterToString(domain)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("cert", ClientUtils.ParameterToString(cert)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("chain", ClientUtils.ParameterToString(chain)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ssl/install", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallSSLCertificateDefaultImplementation(apiResponseLocalVar, domain, cert, chain);

                        Events.ExecuteOnInstallSSLCertificate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallSSLCertificateDefaultImplementation(e, "/ssl/install", uriBuilderLocalVar.Path, domain, cert, chain);
                Events.ExecuteOnErrorInstallSSLCertificate(e);
                throw;
            }
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterProvisionSSLCertificatesDefaultImplementation(ApiResponse<SSLCertificatesProvisionResponse> apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterProvisionSSLCertificates(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterProvisionSSLCertificates(ref bool suppressDefaultLog, ApiResponse<SSLCertificatesProvisionResponse> apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorProvisionSSLCertificatesDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorProvisionSSLCertificates(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorProvisionSSLCertificates(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Provision SSL certificates Provisions certificates for all domains. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="SSLCertificatesProvisionResponse"/></returns>
        public async Task<ApiResponse<SSLCertificatesProvisionResponse>?> ProvisionSSLCertificatesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProvisionSSLCertificatesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Provision SSL certificates Provisions certificates for all domains. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="SSLCertificatesProvisionResponse"/></returns>
        public async Task<ApiResponse<SSLCertificatesProvisionResponse>> ProvisionSSLCertificatesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ssl/provision";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<SSLCertificatesProvisionResponse> apiResponseLocalVar = new ApiResponse<SSLCertificatesProvisionResponse>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ssl/provision", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProvisionSSLCertificatesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnProvisionSSLCertificates(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProvisionSSLCertificatesDefaultImplementation(e, "/ssl/provision", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorProvisionSSLCertificates(e);
                throw;
            }
        }
    }
}
