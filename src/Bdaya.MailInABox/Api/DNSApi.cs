// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Bdaya.MailInABox.Client;
using Bdaya.MailInABox.Api;
using Bdaya.MailInABox.Model;

namespace Bdaya.MailInABox.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDNSApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DNSApiEvents Events { get; }

        /// <summary>
        /// Add DNS custom A record
        /// </summary>
        /// <remarks>
        /// Adds a custom DNS A record for the specified query name.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> AddDnsCustomARecordAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add DNS custom A record
        /// </summary>
        /// <remarks>
        /// Adds a custom DNS A record for the specified query name.
        /// </remarks>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> AddDnsCustomARecordOrDefaultAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add DNS custom record
        /// </summary>
        /// <remarks>
        /// Adds a custom DNS record for the specified query name and type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> AddDnsCustomRecordAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add DNS custom record
        /// </summary>
        /// <remarks>
        /// Adds a custom DNS record for the specified query name and type.
        /// </remarks>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> AddDnsCustomRecordOrDefaultAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add DNS secondary nameserver
        /// </summary>
        /// <remarks>
        /// Adds one or more secondary nameservers. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostnames">Hostnames separated with commas or spaces.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> AddDnsSecondaryNameserverAsync(string hostnames, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add DNS secondary nameserver
        /// </summary>
        /// <remarks>
        /// Adds one or more secondary nameservers. 
        /// </remarks>
        /// <param name="hostnames">Hostnames separated with commas or spaces.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> AddDnsSecondaryNameserverOrDefaultAsync(string hostnames, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS custom A records
        /// </summary>
        /// <remarks>
        /// Returns all custom A records for the specified query name.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="qname">DNS query name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;DNSCustomRecord&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<DNSCustomRecord>>> GetDnsCustomARecordsForQNameAsync(string qname, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS custom A records
        /// </summary>
        /// <remarks>
        /// Returns all custom A records for the specified query name.
        /// </remarks>
        /// <param name="qname">DNS query name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;List&lt;DNSCustomRecord&gt;&gt;?&gt;</returns>
        Task<ApiResponse<List<DNSCustomRecord>>?> GetDnsCustomARecordsForQNameOrDefaultAsync(string qname, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS custom records
        /// </summary>
        /// <remarks>
        /// Returns all custom DNS records.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;DNSCustomRecord&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<DNSCustomRecord>>> GetDnsCustomRecordsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS custom records
        /// </summary>
        /// <remarks>
        /// Returns all custom DNS records.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;List&lt;DNSCustomRecord&gt;&gt;?&gt;</returns>
        Task<ApiResponse<List<DNSCustomRecord>>?> GetDnsCustomRecordsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS custom records
        /// </summary>
        /// <remarks>
        /// Returns all custom records for the specified query name and type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;DNSCustomRecord&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<DNSCustomRecord>>> GetDnsCustomRecordsForQNameAndTypeAsync(DNSRecordType rtype, string qname, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS custom records
        /// </summary>
        /// <remarks>
        /// Returns all custom records for the specified query name and type.
        /// </remarks>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;List&lt;DNSCustomRecord&gt;&gt;?&gt;</returns>
        Task<ApiResponse<List<DNSCustomRecord>>?> GetDnsCustomRecordsForQNameAndTypeOrDefaultAsync(DNSRecordType rtype, string qname, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS dump
        /// </summary>
        /// <remarks>
        /// Returns all DNS records.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;List&lt;DNSDumpDomainsInner&gt;&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<List<DNSDumpDomainsInner>>>> GetDnsDumpAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS dump
        /// </summary>
        /// <remarks>
        /// Returns all DNS records.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;List&lt;List&lt;DNSDumpDomainsInner&gt;&gt;&gt;?&gt;</returns>
        Task<ApiResponse<List<List<DNSDumpDomainsInner>>>?> GetDnsDumpOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS secondary nameserver
        /// </summary>
        /// <remarks>
        /// Returns a list of nameserver hostnames. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;DNSSecondaryNameserverResponse&gt;&gt;</returns>
        Task<ApiResponse<DNSSecondaryNameserverResponse>> GetDnsSecondaryNameserverAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS secondary nameserver
        /// </summary>
        /// <remarks>
        /// Returns a list of nameserver hostnames. 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;DNSSecondaryNameserverResponse&gt;?&gt;</returns>
        Task<ApiResponse<DNSSecondaryNameserverResponse>?> GetDnsSecondaryNameserverOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS zonefile
        /// </summary>
        /// <remarks>
        /// Returns a DNS zone file for a hostname.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">Hostname</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> GetDnsZonefileAsync(string zone, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS zonefile
        /// </summary>
        /// <remarks>
        /// Returns a DNS zone file for a hostname.
        /// </remarks>
        /// <param name="zone">Hostname</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> GetDnsZonefileOrDefaultAsync(string zone, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS zones
        /// </summary>
        /// <remarks>
        /// Returns an array of all managed top-level domains.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;string&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<string>>> GetDnsZonesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS zones
        /// </summary>
        /// <remarks>
        /// Returns an array of all managed top-level domains.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;List&lt;string&gt;&gt;?&gt;</returns>
        Task<ApiResponse<List<string>>?> GetDnsZonesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove DNS custom A record
        /// </summary>
        /// <remarks>
        /// Removes a DNS custom A record for the specified domain &amp; value.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> RemoveDnsCustomARecordAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove DNS custom A record
        /// </summary>
        /// <remarks>
        /// Removes a DNS custom A record for the specified domain &amp; value.
        /// </remarks>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> RemoveDnsCustomARecordOrDefaultAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove DNS custom record
        /// </summary>
        /// <remarks>
        /// Removes a DNS custom record for the specified domain, type &amp; value.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> RemoveDnsCustomRecordAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove DNS custom record
        /// </summary>
        /// <remarks>
        /// Removes a DNS custom record for the specified domain, type &amp; value.
        /// </remarks>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> RemoveDnsCustomRecordOrDefaultAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update DNS
        /// </summary>
        /// <remarks>
        /// Updates the DNS. Involves creating zone files and restarting &#x60;nsd&#x60;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="force">Force an update even if mailinabox detects no changes are required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> UpdateDnsAsync(int force, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update DNS
        /// </summary>
        /// <remarks>
        /// Updates the DNS. Involves creating zone files and restarting &#x60;nsd&#x60;.
        /// </remarks>
        /// <param name="force">Force an update even if mailinabox detects no changes are required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> UpdateDnsOrDefaultAsync(int force, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update DNS custom A record
        /// </summary>
        /// <remarks>
        /// Updates an existing DNS custom A record value for the specified qname.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> UpdateDnsCustomARecordAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update DNS custom A record
        /// </summary>
        /// <remarks>
        /// Updates an existing DNS custom A record value for the specified qname.
        /// </remarks>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> UpdateDnsCustomARecordOrDefaultAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update DNS custom record
        /// </summary>
        /// <remarks>
        /// Updates an existing DNS custom record value for the specified qname and type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> UpdateDnsCustomRecordAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update DNS custom record
        /// </summary>
        /// <remarks>
        /// Updates an existing DNS custom record value for the specified qname and type.
        /// </remarks>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> UpdateDnsCustomRecordOrDefaultAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public class DNSApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnAddDnsCustomARecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddDnsCustomARecord;

        internal void ExecuteOnAddDnsCustomARecord(ApiResponse<string> apiResponse)
        {
            OnAddDnsCustomARecord?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorAddDnsCustomARecord(Exception exception)
        {
            OnErrorAddDnsCustomARecord?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnAddDnsCustomRecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddDnsCustomRecord;

        internal void ExecuteOnAddDnsCustomRecord(ApiResponse<string> apiResponse)
        {
            OnAddDnsCustomRecord?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorAddDnsCustomRecord(Exception exception)
        {
            OnErrorAddDnsCustomRecord?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnAddDnsSecondaryNameserver;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddDnsSecondaryNameserver;

        internal void ExecuteOnAddDnsSecondaryNameserver(ApiResponse<string> apiResponse)
        {
            OnAddDnsSecondaryNameserver?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorAddDnsSecondaryNameserver(Exception exception)
        {
            OnErrorAddDnsSecondaryNameserver?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<List<DNSCustomRecord>>>? OnGetDnsCustomARecordsForQName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDnsCustomARecordsForQName;

        internal void ExecuteOnGetDnsCustomARecordsForQName(ApiResponse<List<DNSCustomRecord>> apiResponse)
        {
            OnGetDnsCustomARecordsForQName?.Invoke(this, new ApiResponseEventArgs<List<DNSCustomRecord>>(apiResponse));
        }

        internal void ExecuteOnErrorGetDnsCustomARecordsForQName(Exception exception)
        {
            OnErrorGetDnsCustomARecordsForQName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<List<DNSCustomRecord>>>? OnGetDnsCustomRecords;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDnsCustomRecords;

        internal void ExecuteOnGetDnsCustomRecords(ApiResponse<List<DNSCustomRecord>> apiResponse)
        {
            OnGetDnsCustomRecords?.Invoke(this, new ApiResponseEventArgs<List<DNSCustomRecord>>(apiResponse));
        }

        internal void ExecuteOnErrorGetDnsCustomRecords(Exception exception)
        {
            OnErrorGetDnsCustomRecords?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<List<DNSCustomRecord>>>? OnGetDnsCustomRecordsForQNameAndType;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDnsCustomRecordsForQNameAndType;

        internal void ExecuteOnGetDnsCustomRecordsForQNameAndType(ApiResponse<List<DNSCustomRecord>> apiResponse)
        {
            OnGetDnsCustomRecordsForQNameAndType?.Invoke(this, new ApiResponseEventArgs<List<DNSCustomRecord>>(apiResponse));
        }

        internal void ExecuteOnErrorGetDnsCustomRecordsForQNameAndType(Exception exception)
        {
            OnErrorGetDnsCustomRecordsForQNameAndType?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<List<List<DNSDumpDomainsInner>>>>? OnGetDnsDump;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDnsDump;

        internal void ExecuteOnGetDnsDump(ApiResponse<List<List<DNSDumpDomainsInner>>> apiResponse)
        {
            OnGetDnsDump?.Invoke(this, new ApiResponseEventArgs<List<List<DNSDumpDomainsInner>>>(apiResponse));
        }

        internal void ExecuteOnErrorGetDnsDump(Exception exception)
        {
            OnErrorGetDnsDump?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<DNSSecondaryNameserverResponse>>? OnGetDnsSecondaryNameserver;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDnsSecondaryNameserver;

        internal void ExecuteOnGetDnsSecondaryNameserver(ApiResponse<DNSSecondaryNameserverResponse> apiResponse)
        {
            OnGetDnsSecondaryNameserver?.Invoke(this, new ApiResponseEventArgs<DNSSecondaryNameserverResponse>(apiResponse));
        }

        internal void ExecuteOnErrorGetDnsSecondaryNameserver(Exception exception)
        {
            OnErrorGetDnsSecondaryNameserver?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnGetDnsZonefile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDnsZonefile;

        internal void ExecuteOnGetDnsZonefile(ApiResponse<string> apiResponse)
        {
            OnGetDnsZonefile?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorGetDnsZonefile(Exception exception)
        {
            OnErrorGetDnsZonefile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<List<string>>>? OnGetDnsZones;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDnsZones;

        internal void ExecuteOnGetDnsZones(ApiResponse<List<string>> apiResponse)
        {
            OnGetDnsZones?.Invoke(this, new ApiResponseEventArgs<List<string>>(apiResponse));
        }

        internal void ExecuteOnErrorGetDnsZones(Exception exception)
        {
            OnErrorGetDnsZones?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnRemoveDnsCustomARecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveDnsCustomARecord;

        internal void ExecuteOnRemoveDnsCustomARecord(ApiResponse<string> apiResponse)
        {
            OnRemoveDnsCustomARecord?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorRemoveDnsCustomARecord(Exception exception)
        {
            OnErrorRemoveDnsCustomARecord?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnRemoveDnsCustomRecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveDnsCustomRecord;

        internal void ExecuteOnRemoveDnsCustomRecord(ApiResponse<string> apiResponse)
        {
            OnRemoveDnsCustomRecord?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorRemoveDnsCustomRecord(Exception exception)
        {
            OnErrorRemoveDnsCustomRecord?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnUpdateDns;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateDns;

        internal void ExecuteOnUpdateDns(ApiResponse<string> apiResponse)
        {
            OnUpdateDns?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorUpdateDns(Exception exception)
        {
            OnErrorUpdateDns?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnUpdateDnsCustomARecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateDnsCustomARecord;

        internal void ExecuteOnUpdateDnsCustomARecord(ApiResponse<string> apiResponse)
        {
            OnUpdateDnsCustomARecord?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorUpdateDnsCustomARecord(Exception exception)
        {
            OnErrorUpdateDnsCustomARecord?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnUpdateDnsCustomRecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateDnsCustomRecord;

        internal void ExecuteOnUpdateDnsCustomRecord(ApiResponse<string> apiResponse)
        {
            OnUpdateDnsCustomRecord?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorUpdateDnsCustomRecord(Exception exception)
        {
            OnErrorUpdateDnsCustomRecord?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class DNSApi : IDNSApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DNSApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DNSApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public ITokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DNSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DNSApi(ILogger<DNSApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DNSApiEvents dNSApiEvents,
            ITokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
            Events = dNSApiEvents;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatAddDnsCustomARecord(ref string qname, ref string body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateAddDnsCustomARecord(string qname, string body)
        {
            if (qname == null)
                throw new ArgumentNullException(nameof(qname));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void AfterAddDnsCustomARecordDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string qname, string body)
        {
            bool suppressDefaultLog = false;
            AfterAddDnsCustomARecord(ref suppressDefaultLog, apiResponseLocalVar, qname, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void AfterAddDnsCustomARecord(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string qname, string body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void OnErrorAddDnsCustomARecordDefaultImplementation(Exception exception, string pathFormat, string path, string qname, string body)
        {
            bool suppressDefaultLog = false;
            OnErrorAddDnsCustomARecord(ref suppressDefaultLog, exception, pathFormat, path, qname, body);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void OnErrorAddDnsCustomARecord(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string qname, string body);

        /// <summary>
        /// Add DNS custom A record Adds a custom DNS A record for the specified query name.
        /// </summary>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> AddDnsCustomARecordOrDefaultAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddDnsCustomARecordAsync(qname, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add DNS custom A record Adds a custom DNS A record for the specified query name.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> AddDnsCustomARecordAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddDnsCustomARecord(qname, body);

                FormatAddDnsCustomARecord(ref qname, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/custom/{qname}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bqname%7D", Uri.EscapeDataString(qname.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "text/plain"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/custom/{qname}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddDnsCustomARecordDefaultImplementation(apiResponseLocalVar, qname, body);

                        Events.ExecuteOnAddDnsCustomARecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddDnsCustomARecordDefaultImplementation(e, "/dns/custom/{qname}", uriBuilderLocalVar.Path, qname, body);
                Events.ExecuteOnErrorAddDnsCustomARecord(e);
                throw;
            }
        }

        partial void FormatAddDnsCustomRecord(DNSRecordType rtype, ref string qname, ref string body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateAddDnsCustomRecord(DNSRecordType rtype, string qname, string body)
        {
            if (rtype == null)
                throw new ArgumentNullException(nameof(rtype));

            if (qname == null)
                throw new ArgumentNullException(nameof(qname));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void AfterAddDnsCustomRecordDefaultImplementation(ApiResponse<string> apiResponseLocalVar, DNSRecordType rtype, string qname, string body)
        {
            bool suppressDefaultLog = false;
            AfterAddDnsCustomRecord(ref suppressDefaultLog, apiResponseLocalVar, rtype, qname, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void AfterAddDnsCustomRecord(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, DNSRecordType rtype, string qname, string body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void OnErrorAddDnsCustomRecordDefaultImplementation(Exception exception, string pathFormat, string path, DNSRecordType rtype, string qname, string body)
        {
            bool suppressDefaultLog = false;
            OnErrorAddDnsCustomRecord(ref suppressDefaultLog, exception, pathFormat, path, rtype, qname, body);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void OnErrorAddDnsCustomRecord(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, DNSRecordType rtype, string qname, string body);

        /// <summary>
        /// Add DNS custom record Adds a custom DNS record for the specified query name and type.
        /// </summary>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> AddDnsCustomRecordOrDefaultAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddDnsCustomRecordAsync(rtype, qname, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add DNS custom record Adds a custom DNS record for the specified query name and type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> AddDnsCustomRecordAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddDnsCustomRecord(rtype, qname, body);

                FormatAddDnsCustomRecord(rtype, ref qname, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/custom/{qname}/{rtype}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brtype%7D", Uri.EscapeDataString(rtype.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bqname%7D", Uri.EscapeDataString(qname.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "text/plain"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/custom/{qname}/{rtype}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddDnsCustomRecordDefaultImplementation(apiResponseLocalVar, rtype, qname, body);

                        Events.ExecuteOnAddDnsCustomRecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddDnsCustomRecordDefaultImplementation(e, "/dns/custom/{qname}/{rtype}", uriBuilderLocalVar.Path, rtype, qname, body);
                Events.ExecuteOnErrorAddDnsCustomRecord(e);
                throw;
            }
        }

        partial void FormatAddDnsSecondaryNameserver(ref string hostnames);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="hostnames"></param>
        /// <returns></returns>
        private void ValidateAddDnsSecondaryNameserver(string hostnames)
        {
            if (hostnames == null)
                throw new ArgumentNullException(nameof(hostnames));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="hostnames"></param>
        private void AfterAddDnsSecondaryNameserverDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string hostnames)
        {
            bool suppressDefaultLog = false;
            AfterAddDnsSecondaryNameserver(ref suppressDefaultLog, apiResponseLocalVar, hostnames);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="hostnames"></param>
        partial void AfterAddDnsSecondaryNameserver(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string hostnames);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="hostnames"></param>
        private void OnErrorAddDnsSecondaryNameserverDefaultImplementation(Exception exception, string pathFormat, string path, string hostnames)
        {
            bool suppressDefaultLog = false;
            OnErrorAddDnsSecondaryNameserver(ref suppressDefaultLog, exception, pathFormat, path, hostnames);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="hostnames"></param>
        partial void OnErrorAddDnsSecondaryNameserver(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string hostnames);

        /// <summary>
        /// Add DNS secondary nameserver Adds one or more secondary nameservers. 
        /// </summary>
        /// <param name="hostnames">Hostnames separated with commas or spaces.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> AddDnsSecondaryNameserverOrDefaultAsync(string hostnames, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddDnsSecondaryNameserverAsync(hostnames, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add DNS secondary nameserver Adds one or more secondary nameservers. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostnames">Hostnames separated with commas or spaces.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> AddDnsSecondaryNameserverAsync(string hostnames, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddDnsSecondaryNameserver(hostnames);

                FormatAddDnsSecondaryNameserver(ref hostnames);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/secondary-nameserver";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("hostnames", ClientUtils.ParameterToString(hostnames)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/secondary-nameserver", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddDnsSecondaryNameserverDefaultImplementation(apiResponseLocalVar, hostnames);

                        Events.ExecuteOnAddDnsSecondaryNameserver(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddDnsSecondaryNameserverDefaultImplementation(e, "/dns/secondary-nameserver", uriBuilderLocalVar.Path, hostnames);
                Events.ExecuteOnErrorAddDnsSecondaryNameserver(e);
                throw;
            }
        }

        partial void FormatGetDnsCustomARecordsForQName(ref string qname);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="qname"></param>
        /// <returns></returns>
        private void ValidateGetDnsCustomARecordsForQName(string qname)
        {
            if (qname == null)
                throw new ArgumentNullException(nameof(qname));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="qname"></param>
        private void AfterGetDnsCustomARecordsForQNameDefaultImplementation(ApiResponse<List<DNSCustomRecord>> apiResponseLocalVar, string qname)
        {
            bool suppressDefaultLog = false;
            AfterGetDnsCustomARecordsForQName(ref suppressDefaultLog, apiResponseLocalVar, qname);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="qname"></param>
        partial void AfterGetDnsCustomARecordsForQName(ref bool suppressDefaultLog, ApiResponse<List<DNSCustomRecord>> apiResponseLocalVar, string qname);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="qname"></param>
        private void OnErrorGetDnsCustomARecordsForQNameDefaultImplementation(Exception exception, string pathFormat, string path, string qname)
        {
            bool suppressDefaultLog = false;
            OnErrorGetDnsCustomARecordsForQName(ref suppressDefaultLog, exception, pathFormat, path, qname);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="qname"></param>
        partial void OnErrorGetDnsCustomARecordsForQName(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string qname);

        /// <summary>
        /// Get DNS custom A records Returns all custom A records for the specified query name.
        /// </summary>
        /// <param name="qname">DNS query name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<DNSCustomRecord>>?> GetDnsCustomARecordsForQNameOrDefaultAsync(string qname, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDnsCustomARecordsForQNameAsync(qname, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DNS custom A records Returns all custom A records for the specified query name.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="qname">DNS query name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<DNSCustomRecord>>> GetDnsCustomARecordsForQNameAsync(string qname, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDnsCustomARecordsForQName(qname);

                FormatGetDnsCustomARecordsForQName(ref qname);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/custom/{qname}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bqname%7D", Uri.EscapeDataString(qname.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<List<DNSCustomRecord>> apiResponseLocalVar = new ApiResponse<List<DNSCustomRecord>>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/custom/{qname}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDnsCustomARecordsForQNameDefaultImplementation(apiResponseLocalVar, qname);

                        Events.ExecuteOnGetDnsCustomARecordsForQName(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDnsCustomARecordsForQNameDefaultImplementation(e, "/dns/custom/{qname}", uriBuilderLocalVar.Path, qname);
                Events.ExecuteOnErrorGetDnsCustomARecordsForQName(e);
                throw;
            }
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetDnsCustomRecordsDefaultImplementation(ApiResponse<List<DNSCustomRecord>> apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetDnsCustomRecords(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetDnsCustomRecords(ref bool suppressDefaultLog, ApiResponse<List<DNSCustomRecord>> apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetDnsCustomRecordsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetDnsCustomRecords(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetDnsCustomRecords(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Get DNS custom records Returns all custom DNS records.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<DNSCustomRecord>>?> GetDnsCustomRecordsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDnsCustomRecordsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DNS custom records Returns all custom DNS records.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<DNSCustomRecord>>> GetDnsCustomRecordsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/custom";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<List<DNSCustomRecord>> apiResponseLocalVar = new ApiResponse<List<DNSCustomRecord>>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/custom", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDnsCustomRecordsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetDnsCustomRecords(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDnsCustomRecordsDefaultImplementation(e, "/dns/custom", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetDnsCustomRecords(e);
                throw;
            }
        }

        partial void FormatGetDnsCustomRecordsForQNameAndType(DNSRecordType rtype, ref string qname);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <returns></returns>
        private void ValidateGetDnsCustomRecordsForQNameAndType(DNSRecordType rtype, string qname)
        {
            if (rtype == null)
                throw new ArgumentNullException(nameof(rtype));

            if (qname == null)
                throw new ArgumentNullException(nameof(qname));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        private void AfterGetDnsCustomRecordsForQNameAndTypeDefaultImplementation(ApiResponse<List<DNSCustomRecord>> apiResponseLocalVar, DNSRecordType rtype, string qname)
        {
            bool suppressDefaultLog = false;
            AfterGetDnsCustomRecordsForQNameAndType(ref suppressDefaultLog, apiResponseLocalVar, rtype, qname);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        partial void AfterGetDnsCustomRecordsForQNameAndType(ref bool suppressDefaultLog, ApiResponse<List<DNSCustomRecord>> apiResponseLocalVar, DNSRecordType rtype, string qname);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        private void OnErrorGetDnsCustomRecordsForQNameAndTypeDefaultImplementation(Exception exception, string pathFormat, string path, DNSRecordType rtype, string qname)
        {
            bool suppressDefaultLog = false;
            OnErrorGetDnsCustomRecordsForQNameAndType(ref suppressDefaultLog, exception, pathFormat, path, rtype, qname);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        partial void OnErrorGetDnsCustomRecordsForQNameAndType(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, DNSRecordType rtype, string qname);

        /// <summary>
        /// Get DNS custom records Returns all custom records for the specified query name and type.
        /// </summary>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<DNSCustomRecord>>?> GetDnsCustomRecordsForQNameAndTypeOrDefaultAsync(DNSRecordType rtype, string qname, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDnsCustomRecordsForQNameAndTypeAsync(rtype, qname, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DNS custom records Returns all custom records for the specified query name and type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<DNSCustomRecord>>> GetDnsCustomRecordsForQNameAndTypeAsync(DNSRecordType rtype, string qname, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDnsCustomRecordsForQNameAndType(rtype, qname);

                FormatGetDnsCustomRecordsForQNameAndType(rtype, ref qname);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/custom/{qname}/{rtype}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brtype%7D", Uri.EscapeDataString(rtype.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bqname%7D", Uri.EscapeDataString(qname.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<List<DNSCustomRecord>> apiResponseLocalVar = new ApiResponse<List<DNSCustomRecord>>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/custom/{qname}/{rtype}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDnsCustomRecordsForQNameAndTypeDefaultImplementation(apiResponseLocalVar, rtype, qname);

                        Events.ExecuteOnGetDnsCustomRecordsForQNameAndType(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDnsCustomRecordsForQNameAndTypeDefaultImplementation(e, "/dns/custom/{qname}/{rtype}", uriBuilderLocalVar.Path, rtype, qname);
                Events.ExecuteOnErrorGetDnsCustomRecordsForQNameAndType(e);
                throw;
            }
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetDnsDumpDefaultImplementation(ApiResponse<List<List<DNSDumpDomainsInner>>> apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetDnsDump(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetDnsDump(ref bool suppressDefaultLog, ApiResponse<List<List<DNSDumpDomainsInner>>> apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetDnsDumpDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetDnsDump(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetDnsDump(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Get DNS dump Returns all DNS records.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<List<DNSDumpDomainsInner>>>?> GetDnsDumpOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDnsDumpAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DNS dump Returns all DNS records.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<List<DNSDumpDomainsInner>>>> GetDnsDumpAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/dump";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<List<List<DNSDumpDomainsInner>>> apiResponseLocalVar = new ApiResponse<List<List<DNSDumpDomainsInner>>>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/dump", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDnsDumpDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetDnsDump(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDnsDumpDefaultImplementation(e, "/dns/dump", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetDnsDump(e);
                throw;
            }
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetDnsSecondaryNameserverDefaultImplementation(ApiResponse<DNSSecondaryNameserverResponse> apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetDnsSecondaryNameserver(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetDnsSecondaryNameserver(ref bool suppressDefaultLog, ApiResponse<DNSSecondaryNameserverResponse> apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetDnsSecondaryNameserverDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetDnsSecondaryNameserver(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetDnsSecondaryNameserver(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Get DNS secondary nameserver Returns a list of nameserver hostnames. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="DNSSecondaryNameserverResponse"/></returns>
        public async Task<ApiResponse<DNSSecondaryNameserverResponse>?> GetDnsSecondaryNameserverOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDnsSecondaryNameserverAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DNS secondary nameserver Returns a list of nameserver hostnames. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="DNSSecondaryNameserverResponse"/></returns>
        public async Task<ApiResponse<DNSSecondaryNameserverResponse>> GetDnsSecondaryNameserverAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/secondary-nameserver";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<DNSSecondaryNameserverResponse> apiResponseLocalVar = new ApiResponse<DNSSecondaryNameserverResponse>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/secondary-nameserver", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDnsSecondaryNameserverDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetDnsSecondaryNameserver(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDnsSecondaryNameserverDefaultImplementation(e, "/dns/secondary-nameserver", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetDnsSecondaryNameserver(e);
                throw;
            }
        }

        partial void FormatGetDnsZonefile(ref string zone);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="zone"></param>
        /// <returns></returns>
        private void ValidateGetDnsZonefile(string zone)
        {
            if (zone == null)
                throw new ArgumentNullException(nameof(zone));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="zone"></param>
        private void AfterGetDnsZonefileDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string zone)
        {
            bool suppressDefaultLog = false;
            AfterGetDnsZonefile(ref suppressDefaultLog, apiResponseLocalVar, zone);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="zone"></param>
        partial void AfterGetDnsZonefile(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string zone);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="zone"></param>
        private void OnErrorGetDnsZonefileDefaultImplementation(Exception exception, string pathFormat, string path, string zone)
        {
            bool suppressDefaultLog = false;
            OnErrorGetDnsZonefile(ref suppressDefaultLog, exception, pathFormat, path, zone);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="zone"></param>
        partial void OnErrorGetDnsZonefile(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string zone);

        /// <summary>
        /// Get DNS zonefile Returns a DNS zone file for a hostname.
        /// </summary>
        /// <param name="zone">Hostname</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> GetDnsZonefileOrDefaultAsync(string zone, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDnsZonefileAsync(zone, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DNS zonefile Returns a DNS zone file for a hostname.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone">Hostname</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> GetDnsZonefileAsync(string zone, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDnsZonefile(zone);

                FormatGetDnsZonefile(ref zone);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/zonefile/{zone}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bzone%7D", Uri.EscapeDataString(zone.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/zonefile/{zone}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDnsZonefileDefaultImplementation(apiResponseLocalVar, zone);

                        Events.ExecuteOnGetDnsZonefile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDnsZonefileDefaultImplementation(e, "/dns/zonefile/{zone}", uriBuilderLocalVar.Path, zone);
                Events.ExecuteOnErrorGetDnsZonefile(e);
                throw;
            }
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetDnsZonesDefaultImplementation(ApiResponse<List<string>> apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetDnsZones(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetDnsZones(ref bool suppressDefaultLog, ApiResponse<List<string>> apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetDnsZonesDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetDnsZones(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetDnsZones(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Get DNS zones Returns an array of all managed top-level domains.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<string>>?> GetDnsZonesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDnsZonesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DNS zones Returns an array of all managed top-level domains.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List{TValue}"/></returns>
        public async Task<ApiResponse<List<string>>> GetDnsZonesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/zones";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<List<string>> apiResponseLocalVar = new ApiResponse<List<string>>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/zones", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDnsZonesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetDnsZones(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDnsZonesDefaultImplementation(e, "/dns/zones", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetDnsZones(e);
                throw;
            }
        }

        partial void FormatRemoveDnsCustomARecord(ref string qname, ref string body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateRemoveDnsCustomARecord(string qname, string body)
        {
            if (qname == null)
                throw new ArgumentNullException(nameof(qname));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void AfterRemoveDnsCustomARecordDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string qname, string body)
        {
            bool suppressDefaultLog = false;
            AfterRemoveDnsCustomARecord(ref suppressDefaultLog, apiResponseLocalVar, qname, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void AfterRemoveDnsCustomARecord(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string qname, string body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void OnErrorRemoveDnsCustomARecordDefaultImplementation(Exception exception, string pathFormat, string path, string qname, string body)
        {
            bool suppressDefaultLog = false;
            OnErrorRemoveDnsCustomARecord(ref suppressDefaultLog, exception, pathFormat, path, qname, body);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void OnErrorRemoveDnsCustomARecord(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string qname, string body);

        /// <summary>
        /// Remove DNS custom A record Removes a DNS custom A record for the specified domain &amp; value.
        /// </summary>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> RemoveDnsCustomARecordOrDefaultAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveDnsCustomARecordAsync(qname, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove DNS custom A record Removes a DNS custom A record for the specified domain &amp; value.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> RemoveDnsCustomARecordAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveDnsCustomARecord(qname, body);

                FormatRemoveDnsCustomARecord(ref qname, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/custom/{qname}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bqname%7D", Uri.EscapeDataString(qname.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "text/plain"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/custom/{qname}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveDnsCustomARecordDefaultImplementation(apiResponseLocalVar, qname, body);

                        Events.ExecuteOnRemoveDnsCustomARecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveDnsCustomARecordDefaultImplementation(e, "/dns/custom/{qname}", uriBuilderLocalVar.Path, qname, body);
                Events.ExecuteOnErrorRemoveDnsCustomARecord(e);
                throw;
            }
        }

        partial void FormatRemoveDnsCustomRecord(DNSRecordType rtype, ref string qname, ref string body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateRemoveDnsCustomRecord(DNSRecordType rtype, string qname, string body)
        {
            if (rtype == null)
                throw new ArgumentNullException(nameof(rtype));

            if (qname == null)
                throw new ArgumentNullException(nameof(qname));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void AfterRemoveDnsCustomRecordDefaultImplementation(ApiResponse<string> apiResponseLocalVar, DNSRecordType rtype, string qname, string body)
        {
            bool suppressDefaultLog = false;
            AfterRemoveDnsCustomRecord(ref suppressDefaultLog, apiResponseLocalVar, rtype, qname, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void AfterRemoveDnsCustomRecord(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, DNSRecordType rtype, string qname, string body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void OnErrorRemoveDnsCustomRecordDefaultImplementation(Exception exception, string pathFormat, string path, DNSRecordType rtype, string qname, string body)
        {
            bool suppressDefaultLog = false;
            OnErrorRemoveDnsCustomRecord(ref suppressDefaultLog, exception, pathFormat, path, rtype, qname, body);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void OnErrorRemoveDnsCustomRecord(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, DNSRecordType rtype, string qname, string body);

        /// <summary>
        /// Remove DNS custom record Removes a DNS custom record for the specified domain, type &amp; value.
        /// </summary>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> RemoveDnsCustomRecordOrDefaultAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveDnsCustomRecordAsync(rtype, qname, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove DNS custom record Removes a DNS custom record for the specified domain, type &amp; value.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> RemoveDnsCustomRecordAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveDnsCustomRecord(rtype, qname, body);

                FormatRemoveDnsCustomRecord(rtype, ref qname, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/custom/{qname}/{rtype}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brtype%7D", Uri.EscapeDataString(rtype.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bqname%7D", Uri.EscapeDataString(qname.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "text/plain"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/custom/{qname}/{rtype}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveDnsCustomRecordDefaultImplementation(apiResponseLocalVar, rtype, qname, body);

                        Events.ExecuteOnRemoveDnsCustomRecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveDnsCustomRecordDefaultImplementation(e, "/dns/custom/{qname}/{rtype}", uriBuilderLocalVar.Path, rtype, qname, body);
                Events.ExecuteOnErrorRemoveDnsCustomRecord(e);
                throw;
            }
        }

        partial void FormatUpdateDns(ref int force);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="force"></param>
        private void AfterUpdateDnsDefaultImplementation(ApiResponse<string> apiResponseLocalVar, int force)
        {
            bool suppressDefaultLog = false;
            AfterUpdateDns(ref suppressDefaultLog, apiResponseLocalVar, force);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="force"></param>
        partial void AfterUpdateDns(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, int force);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="force"></param>
        private void OnErrorUpdateDnsDefaultImplementation(Exception exception, string pathFormat, string path, int force)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateDns(ref suppressDefaultLog, exception, pathFormat, path, force);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="force"></param>
        partial void OnErrorUpdateDns(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, int force);

        /// <summary>
        /// Update DNS Updates the DNS. Involves creating zone files and restarting &#x60;nsd&#x60;.
        /// </summary>
        /// <param name="force">Force an update even if mailinabox detects no changes are required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> UpdateDnsOrDefaultAsync(int force, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateDnsAsync(force, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update DNS Updates the DNS. Involves creating zone files and restarting &#x60;nsd&#x60;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="force">Force an update even if mailinabox detects no changes are required.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> UpdateDnsAsync(int force, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatUpdateDns(ref force);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/update";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("force", ClientUtils.ParameterToString(force)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateDnsDefaultImplementation(apiResponseLocalVar, force);

                        Events.ExecuteOnUpdateDns(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateDnsDefaultImplementation(e, "/dns/update", uriBuilderLocalVar.Path, force);
                Events.ExecuteOnErrorUpdateDns(e);
                throw;
            }
        }

        partial void FormatUpdateDnsCustomARecord(ref string qname, ref string body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateUpdateDnsCustomARecord(string qname, string body)
        {
            if (qname == null)
                throw new ArgumentNullException(nameof(qname));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void AfterUpdateDnsCustomARecordDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string qname, string body)
        {
            bool suppressDefaultLog = false;
            AfterUpdateDnsCustomARecord(ref suppressDefaultLog, apiResponseLocalVar, qname, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void AfterUpdateDnsCustomARecord(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string qname, string body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void OnErrorUpdateDnsCustomARecordDefaultImplementation(Exception exception, string pathFormat, string path, string qname, string body)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateDnsCustomARecord(ref suppressDefaultLog, exception, pathFormat, path, qname, body);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void OnErrorUpdateDnsCustomARecord(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string qname, string body);

        /// <summary>
        /// Update DNS custom A record Updates an existing DNS custom A record value for the specified qname.
        /// </summary>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> UpdateDnsCustomARecordOrDefaultAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateDnsCustomARecordAsync(qname, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update DNS custom A record Updates an existing DNS custom A record value for the specified qname.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="qname">DNS query name.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> UpdateDnsCustomARecordAsync(string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateDnsCustomARecord(qname, body);

                FormatUpdateDnsCustomARecord(ref qname, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/custom/{qname}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bqname%7D", Uri.EscapeDataString(qname.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "text/plain"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/custom/{qname}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateDnsCustomARecordDefaultImplementation(apiResponseLocalVar, qname, body);

                        Events.ExecuteOnUpdateDnsCustomARecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateDnsCustomARecordDefaultImplementation(e, "/dns/custom/{qname}", uriBuilderLocalVar.Path, qname, body);
                Events.ExecuteOnErrorUpdateDnsCustomARecord(e);
                throw;
            }
        }

        partial void FormatUpdateDnsCustomRecord(DNSRecordType rtype, ref string qname, ref string body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateUpdateDnsCustomRecord(DNSRecordType rtype, string qname, string body)
        {
            if (rtype == null)
                throw new ArgumentNullException(nameof(rtype));

            if (qname == null)
                throw new ArgumentNullException(nameof(qname));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void AfterUpdateDnsCustomRecordDefaultImplementation(ApiResponse<string> apiResponseLocalVar, DNSRecordType rtype, string qname, string body)
        {
            bool suppressDefaultLog = false;
            AfterUpdateDnsCustomRecord(ref suppressDefaultLog, apiResponseLocalVar, rtype, qname, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void AfterUpdateDnsCustomRecord(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, DNSRecordType rtype, string qname, string body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        private void OnErrorUpdateDnsCustomRecordDefaultImplementation(Exception exception, string pathFormat, string path, DNSRecordType rtype, string qname, string body)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateDnsCustomRecord(ref suppressDefaultLog, exception, pathFormat, path, rtype, qname, body);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="rtype"></param>
        /// <param name="qname"></param>
        /// <param name="body"></param>
        partial void OnErrorUpdateDnsCustomRecord(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, DNSRecordType rtype, string qname, string body);

        /// <summary>
        /// Update DNS custom record Updates an existing DNS custom record value for the specified qname and type.
        /// </summary>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> UpdateDnsCustomRecordOrDefaultAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateDnsCustomRecordAsync(rtype, qname, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update DNS custom record Updates an existing DNS custom record value for the specified qname and type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="rtype">Record type</param>
        /// <param name="qname">DNS record query name</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> UpdateDnsCustomRecordAsync(DNSRecordType rtype, string qname, string body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateDnsCustomRecord(rtype, qname, body);

                FormatUpdateDnsCustomRecord(rtype, ref qname, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/dns/custom/{qname}/{rtype}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brtype%7D", Uri.EscapeDataString(rtype.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bqname%7D", Uri.EscapeDataString(qname.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "text/plain"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/dns/custom/{qname}/{rtype}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateDnsCustomRecordDefaultImplementation(apiResponseLocalVar, rtype, qname, body);

                        Events.ExecuteOnUpdateDnsCustomRecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateDnsCustomRecordDefaultImplementation(e, "/dns/custom/{qname}/{rtype}", uriBuilderLocalVar.Path, rtype, qname, body);
                Events.ExecuteOnErrorUpdateDnsCustomRecord(e);
                throw;
            }
        }
    }
}
