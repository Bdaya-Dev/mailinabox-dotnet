// <auto-generated>
/*
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present. 
 *
 * The version of the OpenAPI document: 0.51.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Bdaya.MailInABox.Client;
using Bdaya.MailInABox.Api;
using Bdaya.MailInABox.Model;

namespace Bdaya.MailInABox.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMFAApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MFAApiEvents Events { get; }

        /// <summary>
        /// Retrieve MFA status for you or another user
        /// </summary>
        /// <remarks>
        /// Retrieves which type of MFA is used and configuration
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;MfaStatusResponse&gt;&gt;</returns>
        Task<ApiResponse<MfaStatusResponse>> MfaStatusAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve MFA status for you or another user
        /// </summary>
        /// <remarks>
        /// Retrieves which type of MFA is used and configuration
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;MfaStatusResponse&gt;?&gt;</returns>
        Task<ApiResponse<MfaStatusResponse>?> MfaStatusOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Disable multi-factor authentication for you or another user
        /// </summary>
        /// <remarks>
        /// Disables multi-factor authentication for the currently logged-in admin user or another user if a &#39;user&#39; parameter is submitted. Either disables all multi-factor authentication methods or the method corresponding to the optional property &#x60;mfa_id&#x60;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mfaId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> MfaTotpDisableAsync(Option<string?> mfaId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Disable multi-factor authentication for you or another user
        /// </summary>
        /// <remarks>
        /// Disables multi-factor authentication for the currently logged-in admin user or another user if a &#39;user&#39; parameter is submitted. Either disables all multi-factor authentication methods or the method corresponding to the optional property &#x60;mfa_id&#x60;.
        /// </remarks>
        /// <param name="mfaId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> MfaTotpDisableOrDefaultAsync(Option<string?> mfaId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Enable TOTP authentication
        /// </summary>
        /// <remarks>
        /// Enables TOTP authentication for the currently logged-in admin user
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="secret"></param>
        /// <param name="code"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;string&gt;&gt;</returns>
        Task<ApiResponse<string>> MfaTotpEnableAsync(string secret, string code, Option<string> label = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Enable TOTP authentication
        /// </summary>
        /// <remarks>
        /// Enables TOTP authentication for the currently logged-in admin user
        /// </remarks>
        /// <param name="secret"></param>
        /// <param name="code"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;string&gt;?&gt;</returns>
        Task<ApiResponse<string>?> MfaTotpEnableOrDefaultAsync(string secret, string code, Option<string> label = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public class MFAApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<MfaStatusResponse>>? OnMfaStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMfaStatus;

        internal void ExecuteOnMfaStatus(ApiResponse<MfaStatusResponse> apiResponse)
        {
            OnMfaStatus?.Invoke(this, new ApiResponseEventArgs<MfaStatusResponse>(apiResponse));
        }

        internal void ExecuteOnErrorMfaStatus(Exception exception)
        {
            OnErrorMfaStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnMfaTotpDisable;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMfaTotpDisable;

        internal void ExecuteOnMfaTotpDisable(ApiResponse<string> apiResponse)
        {
            OnMfaTotpDisable?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorMfaTotpDisable(Exception exception)
        {
            OnErrorMfaTotpDisable?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<string>>? OnMfaTotpEnable;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMfaTotpEnable;

        internal void ExecuteOnMfaTotpEnable(ApiResponse<string> apiResponse)
        {
            OnMfaTotpEnable?.Invoke(this, new ApiResponseEventArgs<string>(apiResponse));
        }

        internal void ExecuteOnErrorMfaTotpEnable(Exception exception)
        {
            OnErrorMfaTotpEnable?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MFAApi : IMFAApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MFAApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MFAApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public ITokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MFAApi(ILogger<MFAApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MFAApiEvents mFAApiEvents,
            ITokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
            Events = mFAApiEvents;
            BasicTokenProvider = basicTokenProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterMfaStatusDefaultImplementation(ApiResponse<MfaStatusResponse> apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterMfaStatus(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterMfaStatus(ref bool suppressDefaultLog, ApiResponse<MfaStatusResponse> apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorMfaStatusDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorMfaStatus(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorMfaStatus(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Retrieve MFA status for you or another user Retrieves which type of MFA is used and configuration
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="MfaStatusResponse"/></returns>
        public async Task<ApiResponse<MfaStatusResponse>?> MfaStatusOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MfaStatusAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve MFA status for you or another user Retrieves which type of MFA is used and configuration
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="MfaStatusResponse"/></returns>
        public async Task<ApiResponse<MfaStatusResponse>> MfaStatusAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mfa/status";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<MfaStatusResponse> apiResponseLocalVar = new ApiResponse<MfaStatusResponse>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mfa/status", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMfaStatusDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnMfaStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMfaStatusDefaultImplementation(e, "/mfa/status", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorMfaStatus(e);
                throw;
            }
        }

        partial void FormatMfaTotpDisable(ref Option<string?> mfaId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mfaId"></param>
        private void AfterMfaTotpDisableDefaultImplementation(ApiResponse<string> apiResponseLocalVar, Option<string?> mfaId)
        {
            bool suppressDefaultLog = false;
            AfterMfaTotpDisable(ref suppressDefaultLog, apiResponseLocalVar, mfaId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mfaId"></param>
        partial void AfterMfaTotpDisable(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, Option<string?> mfaId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="mfaId"></param>
        private void OnErrorMfaTotpDisableDefaultImplementation(Exception exception, string pathFormat, string path, Option<string?> mfaId)
        {
            bool suppressDefaultLog = false;
            OnErrorMfaTotpDisable(ref suppressDefaultLog, exception, pathFormat, path, mfaId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="mfaId"></param>
        partial void OnErrorMfaTotpDisable(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string?> mfaId);

        /// <summary>
        /// Disable multi-factor authentication for you or another user Disables multi-factor authentication for the currently logged-in admin user or another user if a &#39;user&#39; parameter is submitted. Either disables all multi-factor authentication methods or the method corresponding to the optional property &#x60;mfa_id&#x60;.
        /// </summary>
        /// <param name="mfaId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> MfaTotpDisableOrDefaultAsync(Option<string?> mfaId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MfaTotpDisableAsync(mfaId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Disable multi-factor authentication for you or another user Disables multi-factor authentication for the currently logged-in admin user or another user if a &#39;user&#39; parameter is submitted. Either disables all multi-factor authentication methods or the method corresponding to the optional property &#x60;mfa_id&#x60;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mfaId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> MfaTotpDisableAsync(Option<string?> mfaId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatMfaTotpDisable(ref mfaId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mfa/disable";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (mfaId.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("mfa_id", ClientUtils.ParameterToString(mfaId.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mfa/disable", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMfaTotpDisableDefaultImplementation(apiResponseLocalVar, mfaId);

                        Events.ExecuteOnMfaTotpDisable(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMfaTotpDisableDefaultImplementation(e, "/mfa/disable", uriBuilderLocalVar.Path, mfaId);
                Events.ExecuteOnErrorMfaTotpDisable(e);
                throw;
            }
        }

        partial void FormatMfaTotpEnable(ref string secret, ref string code, ref Option<string> label);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="secret"></param>
        /// <param name="code"></param>
        /// <param name="label"></param>
        /// <returns></returns>
        private void ValidateMfaTotpEnable(string secret, string code, Option<string> label)
        {
            if (secret == null)
                throw new ArgumentNullException(nameof(secret));

            if (code == null)
                throw new ArgumentNullException(nameof(code));

            if (label.IsSet && label.Value == null)
                throw new ArgumentNullException(nameof(label));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="secret"></param>
        /// <param name="code"></param>
        /// <param name="label"></param>
        private void AfterMfaTotpEnableDefaultImplementation(ApiResponse<string> apiResponseLocalVar, string secret, string code, Option<string> label)
        {
            bool suppressDefaultLog = false;
            AfterMfaTotpEnable(ref suppressDefaultLog, apiResponseLocalVar, secret, code, label);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="secret"></param>
        /// <param name="code"></param>
        /// <param name="label"></param>
        partial void AfterMfaTotpEnable(ref bool suppressDefaultLog, ApiResponse<string> apiResponseLocalVar, string secret, string code, Option<string> label);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="secret"></param>
        /// <param name="code"></param>
        /// <param name="label"></param>
        private void OnErrorMfaTotpEnableDefaultImplementation(Exception exception, string pathFormat, string path, string secret, string code, Option<string> label)
        {
            bool suppressDefaultLog = false;
            OnErrorMfaTotpEnable(ref suppressDefaultLog, exception, pathFormat, path, secret, code, label);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="secret"></param>
        /// <param name="code"></param>
        /// <param name="label"></param>
        partial void OnErrorMfaTotpEnable(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string secret, string code, Option<string> label);

        /// <summary>
        /// Enable TOTP authentication Enables TOTP authentication for the currently logged-in admin user
        /// </summary>
        /// <param name="secret"></param>
        /// <param name="code"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>?> MfaTotpEnableOrDefaultAsync(string secret, string code, Option<string> label = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MfaTotpEnableAsync(secret, code, label, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Enable TOTP authentication Enables TOTP authentication for the currently logged-in admin user
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="secret"></param>
        /// <param name="code"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="string"/></returns>
        public async Task<ApiResponse<string>> MfaTotpEnableAsync(string secret, string code, Option<string> label = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMfaTotpEnable(secret, code, label);

                FormatMfaTotpEnable(ref secret, ref code, ref label);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/mfa/totp/enable";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("secret", ClientUtils.ParameterToString(secret)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("code", ClientUtils.ParameterToString(code)));

                    if (label.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("label", ClientUtils.ParameterToString(label.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar = (BasicToken) await BasicTokenProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar);

                    basicTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/html"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<string> apiResponseLocalVar = new ApiResponse<string>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mfa/totp/enable", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMfaTotpEnableDefaultImplementation(apiResponseLocalVar, secret, code, label);

                        Events.ExecuteOnMfaTotpEnable(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMfaTotpEnableDefaultImplementation(e, "/mfa/totp/enable", uriBuilderLocalVar.Path, secret, code, label);
                Events.ExecuteOnErrorMfaTotpEnable(e);
                throw;
            }
        }
    }
}
